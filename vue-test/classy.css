@charset "UTF-8";
/**
 * Toolkit styles
 */
/**
 * Import vendor modules
 *
 * CSStyle for building components
 */
/**
 * Grid breakpoint vars
 */
@font-face {
  font-family: 'Calibre-Regular';
  src: url("../../toolkit/fonts/CalibreWeb-Regular.woff2") format("woff2"), url("../../toolkit/fonts/CalibreWeb-Regular.woff") format("woff"); }

@font-face {
  font-family: 'Calibre-Semibold';
  src: url("../../toolkit/fonts/CalibreWeb-Semibold.woff2") format("woff2"), url("../../toolkit/fonts/CalibreWeb-Semibold.woff") format("woff"); }

/**
 * Clearfix
 *
 * Mixin to drop micro clearfix into a selector. Further reading:
 * http://www.cssmojo.com/the-very-latest-clearfix-reloaded/
 *
 * usage:
 *
 * .clearfix {
 *     @include clearfix();
 * }
 */
/**
 * map for z-index values
 * Used for setting z-indexing on elements by using map-get($map, key);
 *
 * Ex.
 *
 * .content {
 *      z-index: z(layer-one); -> z-index: 5;
 * }
 */
/* ==========================================================================
   #BOX-SIZING
   ========================================================================== */
/**
 * More sensible default box-sizing:
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 */
html {
  box-sizing: border-box; }

*, *::before, *::after {
  box-sizing: inherit; }

/*! normalize.css v4.2.0 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Correct the line height in all browsers.
 * 3. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font-family: sans-serif;
  /* 1 */
  line-height: 1.15;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 3 */
  -webkit-text-size-adjust: 100%;
  /* 3 */ }

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block; }

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none; }

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/* Forms
   ========================================================================== */
/**
 * 1. Change font properties to `inherit` in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold; }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* ==========================================================================
   #RESET
   ========================================================================== */
/**
 * A very simple reset that sits on top of Normalize.css.
 */
body,
h1, h2, h3, h4, h5, h6,
blockquote, p, pre,
dl, dd, ol, ul,
figure,
hr,
fieldset, legend {
  margin: 0;
  padding: 0; }

/**
 * Remove trailing margins from nested lists.
 */
li > ol,
li > ul {
  margin-bottom: 0; }

/**
 * Remove default table spacing.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/* ==========================================================================
   #SHARED
   ========================================================================== */
/**
 * Shared declarations for certain elements.
 */
/**
 * Always declare margins in the same direction:
 * csswizardry.com/2012/06/single-direction-margin-declarations
 */
address,
h1, h2, h3, h4, h5, h6,
blockquote, p, pre dl, ol, ul,
figure,
hr,
table,
fieldset {
  margin-bottom: 27px;
  margin-bottom: 1.5rem; }

/**
 * Consistent indentation for lists.
 */
dd, ol, ul {
  margin-left: 27px;
  margin-left: 1.5rem; }

/**
 * Simple page-level setup.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in rems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 */
html {
  font-size: 1.125em;
  /* [1] */
  line-height: 1.5;
  /* [1] */
  min-height: 100%;
  /* [3] */
  overflow-y: scroll;
  /* [2] */ }

/**
 * Base Headings Styling
 *
 * Simple default styles for headings 1 through 6. Anything more opinionated
 * than simple font-size changes should likely be applied via classes (see:
 * http://csswizardry.com/2016/02/managing-typography-on-large-apps/).
 */
h1,
h2,
h3,
h4 {
  color: #202020;
  font-family: "acumin-pro-extra-condensed", Arial, sans-serif; }

h5,
h6 {
  color: #202020;
  font-family: "Calibre-Semibold", Arial, sans-serif; }

h1 {
  font-size: 72px;
  font-size: 4rem;
  line-height: 1.1; }

h2 {
  font-size: 52px;
  font-size: 2.88889rem;
  line-height: 1.25; }

h3 {
  font-size: 36px;
  font-size: 2rem;
  line-height: 1.5; }

h4 {
  font-size: 28px;
  font-size: 1.55556rem;
  line-height: 1.5; }

h5 {
  font-size: 23.999px;
  font-size: 1.33333rem;
  line-height: 1.25; }

h6 {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.33; }

/**
 * Base Anchor Styling
 *
 * Set anchor color to be the same as body copy and remove underlines.
 */
a {
  color: #202020;
  text-decoration: none; }

/**
 * Tables
 *
 * These are base styles for tables and some helpful classes to make
 * borders and padding easier.
 *
 * Main table styles
 */
table {
  width: 100%; }

/**
 * Cell alignments
 */
[colspan] {
  text-align: center; }

[colspan="1"] {
  text-align: left; }

[rowspan] {
  vertical-align: middle; }

[rowspan="1"] {
  vertical-align: top; }

/* ==========================================================================
   #FORMS
   ========================================================================== */
/**
 * 1. Reset Chrome and Firefox behaviour which sets a `min-width:
 *    min-content;` on fieldsets.
 */
fieldset {
  border: none;
  margin: 0;
  min-width: 0;
  /* [1] */
  padding: 0; }

/**
 * Labels and Text Inputs
 */
label,
select,
textarea {
  display: block; }

blockquote {
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
  margin-top: 27px;
  margin-top: 1.5rem;
  padding-top: 14px;
  padding-top: 0.77778rem;
  padding-right: 41px;
  padding-right: 2.27778rem;
  padding-bottom: 14px;
  padding-bottom: 0.77778rem;
  padding-left: 41px;
  padding-left: 2.27778rem;
  position: relative;
  text-transform: uppercase; }
  blockquote > p {
    font-size: 19.999px;
    font-size: 1.11111rem;
    line-height: 1.5;
    font-family: "acumin-pro-extra-condensed", Arial, sans-serif;
    margin-bottom: 0 !important; }
    blockquote > p::before {
      content: url("../svg/quote-left-blue.svg");
      left: 0;
      position: absolute;
      top: 0; }
    blockquote > p::after {
      margin-left: 19.999px;
      margin-left: 1.11111rem;
      bottom: 0;
      content: url("../svg/quote-right-blue.svg");
      position: absolute; }

/**
 * Base Image styling
 *
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  font-style: italic;
  /* [2] */
  max-width: 100%;
  /* [1] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
img[width],
img[height] {
  /* [1] */
  max-width: none; }

/**
  * Table object
  */
.table {
  /**
     * Align numbers to the right. Especially useful for money.
     */
  /**
     * Cell padding options
     */
  /**
     * Bordered tables
     */
  /**
     * Borders around all sides
     */
  /**
     * Borders on just the bottom of rows
     */
  /**
     * Borders on just the columns
     */
  /**
     * Striped tables
     */
  /**
     * Force table cells to be equal width
     */ }
  .table.\--numerical {
    text-align: right; }
  .table.\--spacing-xxs th,
  .table.\--spacing-xxs td {
    padding: 7px;
    padding: 0.38889rem; }
  .table.\--spacing-xs th,
  .table.\--spacing-xs td {
    padding: 14px;
    padding: 0.77778rem; }
  .table.\--spacing-sm th,
  .table.\--spacing-sm td {
    padding: 19.999px;
    padding: 1.11111rem; }
  .table.\--spacing-nm th,
  .table.\--spacing-nm td {
    padding: 27px;
    padding: 1.5rem; }
  .table.\--spacing-md th,
  .table.\--spacing-md td {
    padding: 34px;
    padding: 1.88889rem; }
  .table.\--spacing-lg th,
  .table.\--spacing-lg td {
    padding: 41px;
    padding: 2.27778rem; }
  .table.\--spacing-xl th,
  .table.\--spacing-xl td {
    padding: 54px;
    padding: 3rem; }
  .table.\--bordered th,
  .table.\--bordered td {
    border: 1px solid #cfcfd4; }
  .table.\--bordered-rows,
  .table.\--bordered-rows th,
  .table.\--bordered-rows td {
    border: 0 solid #cfcfd4; }
  .table.\--bordered-rows th,
  .table.\--bordered-rows td {
    border-bottom-width: 1px; }
  .table.\--bordered-columns,
  .table.\--bordered-columns th,
  .table.\--bordered-columns td {
    border: 0 solid #cfcfd4; }
  .table.\--bordered-columns {
    border-left-width: 1px; }
    .table.\--bordered-columns th,
    .table.\--bordered-columns td {
      border-right-width: 1px; }
  .table.\--striped tbody tr:nth-of-type(odd) {
    background-color: #e9e9ec; }
  .table.\--fixed {
    table-layout: fixed; }

/**
 * Forms
 *
 * These are base styles for forms as well as some helpful classes to
 * make alignment and state easier.
 */
/**
 * Main form styles
 */
fieldset {
  padding: 27px; }

/**
 * Use when marking up a form as an unordered list. e.g. <ul class="form-list">
 */
.form-list {
  list-style: none;
  margin: 0;
  padding: 0; }

/**
 * If you wrap your label/input groups in a container, use this class to
 * apply a margin on the bottom for better vertical spacing custom-input.
 *
 * This could be a <div> or <span> or an <li> if you are using a list
 */
.form-input-container {
  margin-bottom: 27px;
  /**
     * Use this class to force the input containers into a single row and
     * custom-input the vertical alignment of the fields.
     */ }
  .form-input-container.\--inline {
    display: inline-block;
    vertical-align: top; }

/**
 * Labels
 *
 * The ".form-label" class can be used to make an element look like a
 * label if an actual label isn't suitable.
 */
.form-label {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5;
  margin-bottom: 7px;
  margin-bottom: 0.38889rem;
  display: block;
  font-family: "Calibre-Regular", Arial, sans-serif;
  /**
     * Extra help text in labels
     */ }
  .form-label.\--additional {
    display: block;
    font-weight: normal; }

/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input,
 * just use a class to target any/every one.
 */
.form-input {
  /**
     * Base styling for input/select/textarea elements when the parent container
     * has the above class.
     */
  /**
     * Add blue border bottom to show that the text area is focused.
     */
  /**
     * Modifier: --has-error
     *
     * Adds error styling to input/textarea elements when the required
     * criteria isn't met.
     */
  /**
     * Modifier: --data-format-left
     *
     * Targets the data-format attribute and prepends the value of the attr
     * before the input.
     */
  /**
     * Modifier: --data-format-right
     *
     * Targets the data-format attribute and appends the value of the attr
     * after the input
     */ }
  .form-input input,
  .form-input select,
  .form-input textarea {
    border: 1px;
    border-color: #a7a8af;
    border-radius: 0;
    border-style: solid;
    display: block;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    padding: 9px 13.5px;
    padding: 0.5rem 0.75rem;
    width: 100%; }
  .form-input input:focus,
  .form-input textarea:focus {
    border-bottom: 3px solid #3139f2;
    outline: none;
    padding: 9px 13.5px 7px; }
  .form-input.\--has-error input,
  .form-input.\--has-error textarea {
    border-bottom: 3px solid #cf4931;
    color: #cf4931;
    outline: none;
    padding: 9px 13.5px 7px; }
  .form-input.\--has-error .error-message {
    color: #cf4931;
    display: block;
    position: absolute; }
  .form-input.\--data-format-left[data-format] {
    position: relative; }
    .form-input.\--data-format-left[data-format] input {
      padding-left: 27px; }
    .form-input.\--data-format-left[data-format]::before {
      bottom: 10.799px;
      bottom: 0.6rem;
      color: #6f707b;
      content: attr(data-format);
      font-family: "Calibre-Semibold", Arial, sans-serif;
      left: 13.5px;
      left: 0.75rem;
      position: absolute; }
  .form-input.\--data-format-right[data-format] {
    position: relative; }
    .form-input.\--data-format-right[data-format] input {
      padding-right: 27px; }
    .form-input.\--data-format-right[data-format]::after {
      bottom: 10.799px;
      bottom: 0.6rem;
      color: #6f707b;
      content: attr(data-format);
      font-family: "Calibre-Semibold", Arial, sans-serif;
      position: absolute;
      right: 13.5px;
      right: 0.75rem; }

.form-select.\--with-arrow {
  background-color: #ffffff;
  position: relative;
  z-index: 0; }
  .form-select.\--with-arrow::after {
    height: 27px;
    height: 1.5rem;
    width: 14px;
    width: 0.77778rem;
    margin-top: -13.5px;
    margin-top: -0.75rem;
    content: url("../svg/drop-arrow.svg");
    display: inline-block;
    position: absolute;
    right: 13.5px;
    right: 0.75rem;
    top: 50%; }
  .form-select.\--with-arrow select {
    background: none;
    text-transform: capitalize;
    z-index: 5; }

.form-select select {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  background-color: #ffffff;
  border: 1px;
  border-color: #a7a8af;
  border-radius: 0;
  border-style: solid;
  display: block;
  font-family: "Calibre-Semibold", Arial, sans-serif;
  padding: 9px 13.5px;
  padding: 0.5rem 0.75rem;
  width: 100%; }

/**
 * Force form elements into a single inline row
 */
.form-inline label,
.form-inline select,
.form-inline textarea,
.form-inline .form-label,
.form-inline .form-input,
.form-inline .form-select {
  display: inline-block;
  vertical-align: middle; }

/**
 * Input states
 */
/**
 * Disabled states
 */
input[disabled],
select[disabled],
textarea[disabled],
input.is-disabled,
select.is-disabled,
textarea.is-disabled {
  background-color: #cfcfd4;
  border-color: #cfcfd4;
  color: #50525a;
  cursor: not-allowed; }

/**
 * Read Only
 */
input[readonly],
select[readonly],
textarea[readonly],
.form-input.\--is-readonly input,
.form-input.\--is-readonly select,
.form-input.\--is-readonly textarea {
  background-color: #cfcfd4;
  border-color: #cfcfd4;
  color: #50525a; }

/**
 * Extra help text displayed after a field when that field is in focus.
 *
 * Can't be used with .form-inline
 */
.helper-text {
  display: none; }
  textarea:focus + .helper-text,
  textarea:active + .helper-text,
  .form-input input:focus + .helper-text,
  .form-input input:active + .helper-text {
    display: block; }

::-webkit-input-placeholder,
:-moz-placeholder,
::-moz-placeholder,
:-ms-input-placeholder {
  color: #6f707b;
  font-family: "Calibre-Regular", Arial, sans-serif; }

.list-bare {
  list-style: none;
  margin-left: 0; }

.list-inline {
  list-style: none;
  margin-left: 0; }
  .list-inline > li {
    display: inline-block; }

.list-inline-flex {
  list-style: none;
  margin-left: 0; }
  .list-inline-flex > li {
    display: inline-flex; }

.media {
  align-items: flex-start;
  display: flex; }
  .media.\--align-middle {
    align-items: center; }
  .media.\--align-bottom {
    align-items: flex-end; }
  .media.\--flush > .media__figure {
    margin-left: 0;
    margin-right: 0; }
  .media.\--reverse.\--xxs > .media__figure {
    margin-left: 7px;
    margin-left: 0.38889rem;
    margin-right: 0; }
  .media.\--reverse.\--xs > .media__figure {
    margin-left: 14px;
    margin-left: 0.77778rem;
    margin-right: 0; }
  .media.\--reverse.\--sm > .media__figure {
    margin-left: 19.999px;
    margin-left: 1.11111rem;
    margin-right: 0; }
  .media.\--reverse > .media__figure {
    margin-left: 27px;
    margin-left: 1.5rem;
    margin-right: 0;
    order: 1; }
  .media.\--flush .media__figure {
    margin: 0; }
  .media.\--xxs .media__figure {
    margin-right: 7px;
    margin-right: 0.38889rem; }
  .media.\--xs .media__figure {
    margin-right: 14px;
    margin-right: 0.77778rem; }
  .media.\--sm .media__figure {
    margin-right: 19.999px;
    margin-right: 1.11111rem; }
  .media.\--full {
    width: 100%; }
  .media__figure {
    margin-right: 27px;
    margin-right: 1.5rem;
    flex-basis: auto;
    flex-grow: 0;
    flex-shrink: 0;
    margin-left: 0; }
  .media__body {
    flex-basis: auto;
    flex-grow: 1;
    flex-shrink: 1; }
    .media__body > :last-child {
      margin-bottom: 0; }
  @media (max-width: 550px) {
    .media.\--mobile-stacked {
      display: block; }
      .media.\--mobile-stacked > .media__figure {
        margin-bottom: 27px;
        margin-bottom: 1.5rem;
        margin-left: 0;
        margin-right: 0; } }

/*
 * Box container
 *
 * Boxes off content with padding and position relative
 *
 * uses clearfix to clear any floated elements inside box
 */
.box {
  padding: 27px;
  padding: 1.5rem;
  display: block;
  position: relative;
  /*
     * Option: --flush
     *
     * Clears box padding
     */
  /**
     * Option: --xxs
     *
     * xx-small box padding
     */
  /**
     * Option: --xs
     *
     * x-small box padding
     */
  /**
     * Option: --sm
     *
     * small box padding
     */
  /**
     * Option: --md
     *
     * small box padding
     */
  /**
     * Option: --lg
     *
     * small box padding
     */
  /**
     * Option: --xl
     *
     * XL box padding
     */ }
  .box::after {
    clear: both !important;
    content: "" !important;
    display: block !important; }
  .box.\--flush {
    padding: 0; }
  .box.\--xxs {
    padding: 7px;
    padding: 0.38889rem; }
  .box.\--xs {
    padding: 14px;
    padding: 0.77778rem; }
  .box.\--sm {
    padding: 19.999px;
    padding: 1.11111rem; }
  .box.\--md {
    padding: 34px;
    padding: 1.88889rem; }
  .box.\--lg {
    padding: 41px;
    padding: 2.27778rem; }
  .box.\--xl {
    padding: 54px;
    padding: 3rem; }
  .box > :last-child {
    margin-bottom: 0; }

/**
 * Core grid component
 *
 * DO NOT apply dimension or offset utilities to the `grid` element. All cell
 * widths and offsets should be applied to child grid cells.
 */
/* grid container
   ========================================================================== */
/**
 * All content must be contained within child `grid-cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 */
.grid {
  box-sizing: border-box;
  display: flex;
  /* 1 */
  flex-flow: row wrap;
  margin: 0;
  /* 1 */
  padding: 0;
  /* 1 */
  /**
     * Modifier: center align all grid cells
     */
  /**
     * Modifier: right align all grid cells
     */
  /**
     * Modifier: middle-align grid cells
     */
  /**
     * Modifier: bottom-align grid cells
     */
  /**
     * Modifier: allow cells to equal distribute width
     *
     * 1. Provide all values to avoid IE10 bug with shorthand flex
     *    http://git.io/vllC7
     *
     *    Use `0%` to avoid bug in IE10/11 with unitless flex basis
     *    http://git.io/vllWx
     */
  /**
     * Modifier: all cells match height of tallest cell in a row
     */
  /**
     * Modifier: gutters
     */ }
  .grid.\--align-center {
    justify-content: center; }
  .grid.\--align-right {
    justify-content: flex-end; }
  .grid.\--align-middle {
    align-items: center; }
  .grid.\--align-bottom {
    align-items: flex-end; }
  .grid.\--fit > .grid-cell {
    flex: 1 1 0%;
    /* 1 */ }
  .grid.\--equal-height > .grid-cell {
    display: flex; }
  .grid.\--with-gutter {
    margin: 0 -10px;
    margin: 0 -0.55556rem; }
    .grid.\--with-gutter > .grid-cell {
      padding: 0 10px;
      padding: 0 0.55556rem; }

/**
 * No explicit width by default. Rely on combining `grid-cell` with a dimension
 * utility or a component class that extends 'grid'.
 *
 * 1. Set flex items to full width by default
 * 2. Fix issue where elements with overflow extend past the
 *    `grid-cell` container - https://git.io/vw5oF
 */
.grid-cell {
  box-sizing: inherit;
  flex-basis: 100%;
  /* 1 */
  min-width: 0;
  /**
     * Modifier: horizontally center one unit
     * Set a specific unit to be horizontally centered. Doesn't affect
     * any other units. Can still contain a child `grid` object.
     */ }
  .grid-cell.\--center {
    margin: 0 auto; }

.page-wrapper {
  max-width: 1188px;
  max-width: 66rem;
  padding-left: 14px;
  padding-left: 0.77778rem;
  padding-right: 14px;
  padding-right: 0.77778rem;
  margin-left: auto;
  margin-right: auto; }
  .page-wrapper::after {
    clear: both !important;
    content: "" !important;
    display: block !important; }

/**
 * Button Component
 *
 * Base button structure with no styling
 */
.button {
  font-size: 16px;
  font-size: 0.88889rem;
  line-height: 1.6875;
  letter-spacing: 1px;
  letter-spacing: 0.05556rem;
  border: 0;
  cursor: pointer;
  display: inline-block;
  font-family: "Calibre-Semibold", Arial, sans-serif;
  margin: 0;
  overflow: visible;
  padding: 14px 41px;
  padding: 0.77778rem 2.27778rem;
  position: relative;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  transition: opacity 0.15s ease-in-out, background-color 0.2s ease-in-out;
  vertical-align: middle;
  /**
    * Modifier: Primary
    *
    * Primary button styling and functionality
    */
  /**
    * Modifier: Secondary
    *
    * Secondary button styling and functionality
    */
  /**
    * Modifier: Action
    *
    * Action button styling and functionality
    */
  /**
    * Modifier: Neutral
    *
    * Neutral button styling and functionality
    */
  /**
    * Modifier: Bare
    *
    * Bare button styling and functionality
    */
  /**
    * Modifier: Secondary
    *
    * Secondary button styling and functionality
    */
  /**
    * Modifier: Disabled
    *
    * Disabled state for buttons
    */
  /**
     * Modifier: Full-width
     *
     * Full width modifier for buttons. Remove left and right padding along with displaying block
     * and giving width: 100%;
     */ }
  .button.\--small {
    padding: 7px 19.999px;
    padding: 0.38889rem 1.11111rem; }
  .button.\--beta {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.92857; }
  .button.\--spaceless {
    letter-spacing: 0; }
  .button.\--primary {
    background-color: #3139f2;
    color: #ffffff; }
    .button.\--primary:hover, .button.\--primary:focus, .button.\--primary:active {
      background-color: #202020;
      color: #ffffff; }
  .button.\--secondary {
    background-color: #ffffff; }
    .button.\--secondary.\--small, .button.\--secondary.\--small:hover, .button.\--secondary.\--small:focus, .button.\--secondary.\--small:active {
      padding: 3px 34px;
      padding: 0.16667rem 1.88889rem; }
    .button.\--secondary, .button.\--secondary:hover, .button.\--secondary:focus, .button.\--secondary:active {
      border: 4px solid #ffce48;
      color: #202020;
      padding: 10px 41px;
      padding: 0.55556rem 2.27778rem; }
    .button.\--secondary:hover, .button.\--secondary:focus {
      background-color: #ffce48; }
  .button.\--action {
    background-color: #20cb7e;
    color: #202020; }
    .button.\--action:hover, .button.\--action:focus, .button.\--action:active {
      background-color: #202020;
      color: #ffffff; }
      .button.\--action:hover .button__icon, .button.\--action:focus .button__icon, .button.\--action:active .button__icon {
        color: #ffffff;
        fill: #ffffff; }
  .button.\--neutral {
    background-color: #e9e9ec;
    color: #3139f2; }
    .button.\--neutral:hover, .button.\--neutral:focus, .button.\--neutral:active {
      background-color: #202020;
      color: #ffffff; }
  .button.\--bare {
    background-color: #ffffff;
    color: #202020; }
    .button.\--bare:hover, .button.\--bare:focus, .button.\--bare:active {
      background-color: #f0f0f2;
      color: #202020; }
  .button.\--ghost-blue {
    background: none;
    color: #202020; }
    .button.\--ghost-blue.\--small, .button.\--ghost-blue.\--small:hover {
      padding: 3px 34px;
      padding: 0.16667rem 1.88889rem; }
    .button.\--ghost-blue, .button.\--ghost-blue:hover, .button.\--ghost-blue:focus, .button.\--ghost-blue:active {
      border: 4px solid #3139f2;
      color: #202020;
      padding: 10px 41px;
      padding: 0.55556rem 2.27778rem; }
    .button.\--ghost-blue:hover, .button.\--ghost-blue:focus {
      background-color: #3139f2; }
  .button.\--is-disabled, .button.\--is-disabled:hover, .button.\--is-disabled:focus, .button.\--is-disabled:active {
    background-color: #cfcfd4;
    color: #50525a; }
  .button.\--full-width {
    display: block;
    padding-left: 0;
    padding-right: 0;
    width: 100%; }
  .button.\--with-shadow {
    box-shadow: 0.05556rem 0.16667rem 0.55556rem 0 rgba(32, 32, 32, 0.25); }
  .button__icon {
    top: 3.999px;
    top: 0.22222rem;
    display: inline-block;
    height: 18px;
    height: 1rem;
    margin-left: 9px;
    margin-left: 0.5rem;
    position: relative;
    width: 36px;
    width: 2rem; }
    .button__icon.\--dark {
      color: #202020;
      fill: #202020; }
    .button__icon.\--light {
      color: #ffffff;
      fill: #ffffff; }

.custom-input {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5;
  padding-left: 27px;
  padding-left: 1.5rem;
  cursor: pointer;
  display: block;
  font-family: "Calibre-Semibold", Arial, sans-serif;
  position: relative; }
  .custom-input.\--radio .custom-input__indicator {
    border-radius: 50%; }
    .custom-input.\--radio .custom-input__indicator::after {
      height: 10px;
      height: 0.55556rem;
      width: 10px;
      width: 0.55556rem;
      left: 3.999px;
      left: 0.22222rem;
      top: 3.999px;
      top: 0.22222rem;
      background-color: #3139f2;
      border-radius: 50%; }
  .custom-input.\--radio input:disabled ~ .custom-input__indicator::after {
    background-color: #6f707b;
    border-color: #6f707b; }
  .custom-input.\--radio:hover input:not([disabled]):checked ~ .custom-input__indicator,
  .custom-input.\--radio input:focus:not([disabled]):checked ~ .custom-input__indicator {
    background-color: #ffffff; }
  .custom-input.\--checkbox .custom-input__indicator::after {
    height: 12px;
    height: 0.66667rem;
    width: 5.999px;
    width: 0.33333rem;
    top: 1.999px;
    top: 0.11111rem;
    left: 7px;
    left: 0.38889rem;
    border: solid #ffffff;
    border-width: 0 1.999px 1.999px 0;
    border-width: 0 0.11111rem 0.11111rem 0;
    transform: rotate(45deg); }
  .custom-input.\--checkbox input:disabled ~ .custom-input__indicator::after {
    border-color: #6f707b; }
  .custom-input.\--checkbox:hover input:not([disabled]):checked ~ .custom-input__indicator,
  .custom-input.\--checkbox input:focus:not([disabled]):checked ~ .custom-input__indicator {
    background-color: #3139f2; }
  .custom-input__indicator {
    height: 19.999px;
    height: 1.11111rem;
    top: 3px;
    top: 0.16667rem;
    width: 19.999px;
    width: 1.11111rem;
    background-color: #ffffff;
    border: 1px solid #a7a8af;
    border: 0.05556rem solid #a7a8af;
    left: 0;
    position: absolute; }
    .custom-input__indicator::after {
      content: '';
      display: none;
      position: absolute; }
  .custom-input input {
    opacity: 0;
    position: absolute;
    z-index: -1; }
  .custom-input:hover input ~ .custom-input__indicator,
  .custom-input input:focus ~ .custom-input__indicator {
    background-color: #ffffff;
    border: 1px solid #3139f2;
    border: 0.05556rem solid #3139f2; }
  .custom-input input:checked ~ .custom-input__indicator {
    background-color: #ffffff;
    border: 1px solid #3139f2;
    border: 0.05556rem solid #3139f2; }
    .custom-input input:checked ~ .custom-input__indicator::after {
      display: block; }
  .custom-input.\--checkbox:hover input:not([disabled]):checked ~ .custom-input__indicator,
  .custom-input.\--checkbox input:checked:focus ~ .custom-input__indicator {
    background-color: #ffffff; }
  .custom-input:hover input:not([disabled]):checked ~ .custom-input__indicator,
  .custom-input input:checked:focus ~ .custom-input__indicator {
    background-color: #3139f2; }
  .custom-input input:disabled ~ .custom-input__indicator {
    background-color: #cfcfd4;
    opacity: 0.6;
    pointer-events: none; }
    .custom-input input:disabled ~ .custom-input__indicator:hover {
      border: 1px solid #a7a8af;
      border: 0.05556rem solid #a7a8af; }

.subscribe {
  display: flex;
  flex-wrap: wrap; }
  .subscribe__label {
    width: 100%; }
  .subscribe__input input {
    border-right: none;
    width: auto; }
  .subscribe input {
    border-right: none;
    width: auto; }

.pagination {
  margin-bottom: 27px;
  margin-bottom: 1.5rem; }
  .pagination__header {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.5;
    background-color: #202020;
    color: #ffffff;
    display: flex;
    font-family: "Calibre-Regular", Arial, sans-serif;
    justify-content: space-between;
    padding: 14px 19.999px;
    padding: 0.77778rem 1.11111rem; }
  .pagination__view-all {
    background: none;
    border: none;
    color: #ffffff;
    padding: 0; }
  .pagination__footer {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.5;
    background-color: #202020;
    color: #ffffff;
    display: flex;
    font-family: "Calibre-Regular", Arial, sans-serif;
    justify-content: flex-end;
    padding: 14px 19.999px;
    padding: 0.77778rem 1.11111rem; }
  .pagination img {
    height: auto;
    width: 100%; }
  .pagination iframe {
    border: none;
    display: block;
    width: 100%; }
  .pagination .copyright {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.5;
    letter-spacing: 0.3px;
    letter-spacing: 0.01667rem;
    margin-bottom: 34px;
    margin-bottom: 1.88889rem;
    color: #6f707b;
    font-family: "Calibre-Regular", Arial, sans-serif;
    margin-top: -13.5px;
    margin-top: -0.75rem; }
  .pagination [data-slide] {
    display: none; }
  .pagination .active[data-slide],
  .pagination .no-js [data-slide] {
    display: block; }

/*
 * Article card for blog index page
 */
.horizontal-card {
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
  align-content: stretch;
  display: flex;
  flex-basis: auto;
  flex-direction: row;
  flex-grow: 1;
  flex-shrink: 1;
  justify-content: flex-start;
  width: 100%;
  /**
     *  Mobile stacked for flush horizontal cards
     */
  /**
     *  Mobile stacked for boxed off horizontal cards
     */
  /**
     *
     * Modifier: --bordered
     *
     * Adds blue border to left of article card
     */
  /**
     *
     * Modifier: --blue-border
     *
     * Adds blue border to left of article card
     */
  /**
     *
     * Modifier: --light-blue-border
     *
     * Adds light blue border to left of article card
     */
  /**
     *
     * Modifier: --yellow-border
     *
     * Adds yellow border to left of article card
     */
  /*
     * Part: __body
     *
     * Used for full width article card with no image
     * Helps set the flex direction on the body copy and date
     * so that they align properly
     */
  /*
     * Part: __header
     *
     * Styles the header for individual article-cards
     *
     * Adds a flat line height, font-size, margin-bottom and
     * makes header uppercase
     *
     * Also adds arrow
     */
  /*
     * Part: __image-container
     *
     * Wrapper around the article card image
     */
  /*
     * Part: __image
     *
     * Gives image full width and height to account for oversized images
     * causing container to stretch
     */
  /*
     * Part: __copy
     *
     * Give margin-bottom: auto to help align the date section to the bottom right
     */
  /*
     * Part: __secondary
     *
     * Styles and positions the date part of the component
     */
  /*
     * Animated the hover for the article card
     */ }
  @media (max-width: 639px) {
    .horizontal-card.\--mobile-stacked {
      display: block; }
      .horizontal-card.\--mobile-stacked .horizontal-card__image-container {
        height: 199.999px;
        height: 11.11111rem;
        width: 100%; } }
  @media (max-width: 550px) {
    .horizontal-card.\--boxed-mobile-stacked,
    .horizontal-card.\--boxed-mobile-stacked .media {
      display: block; }
    .horizontal-card.\--boxed-mobile-stacked .media__figure {
      margin-bottom: 27px;
      margin-bottom: 1.5rem;
      margin-left: 0;
      margin-right: 0; }
    .horizontal-card.\--boxed-mobile-stacked .horizontal-card__image-container {
      height: 199.999px;
      height: 11.11111rem;
      width: 100%; } }
  .horizontal-card.\--bordered {
    border-bottom-color: #a7a8af;
    border-bottom-width: 1px;
    border-left-color: transparent;
    border-left-width: 3px;
    border-right-color: #e9e9ec;
    border-right-width: 1px;
    border-style: solid;
    border-top-color: #e9e9ec;
    border-top-width: 1px; }
  .horizontal-card.\--blue-border {
    border-left-color: #3139f2; }
  .horizontal-card.\--light-blue-border {
    border-left-color: #4d64ff; }
  .horizontal-card.\--yellow-border {
    border-left-color: #ecb500; }
  .horizontal-card__body {
    align-self: stretch;
    display: flex;
    flex: 1;
    flex-direction: column;
    justify-content: space-between; }
    .horizontal-card__body.\--white {
      background-color: #ffffff; }
    .horizontal-card__body.\--padded {
      padding: 19.999px;
      padding: 1.11111rem; }
  .horizontal-card__header {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.25;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    margin-bottom: 27px;
    margin-bottom: 1.5rem;
    position: relative; }
    .horizontal-card__header.\--small {
      font-size: 14px;
      font-size: 0.77778rem;
      line-height: 1.25; }
    .horizontal-card__header.\--large {
      font-size: 23.999px;
      font-size: 1.33333rem;
      line-height: 1.25; }
  .horizontal-card__image-container {
    height: 149.999px;
    height: 8.33333rem;
    width: 149.999px;
    width: 8.33333rem;
    background-color: #3139f2;
    overflow: hidden;
    position: relative; }
    .horizontal-card__image-container.\--full-height {
      height: 100%; }
    .horizontal-card__image-container.\--small {
      height: 90px;
      height: 5rem;
      width: 90px;
      width: 5rem; }
  .horizontal-card__image {
    min-width: 399.999px;
    min-width: 22.22222rem;
    left: 50%;
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 100ms ease-in;
    width: 100%; }
    .horizontal-card__image.\--small {
      min-width: 199.999px;
      min-width: 11.11111rem; }
  .horizontal-card__copy {
    margin-bottom: auto; }
  .horizontal-card__secondary-container {
    align-items: center;
    display: flex;
    justify-content: space-between;
    width: 100%; }
  .horizontal-card__secondary-type {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.5;
    letter-spacing: 1px;
    letter-spacing: 0.05556rem;
    align-self: flex-start;
    color: #6f707b;
    display: flex;
    font-family: "Calibre-Regular", Arial, sans-serif;
    justify-content: flex-start;
    text-decoration: none;
    text-transform: uppercase; }
  .horizontal-card__secondary-icon {
    height: 18px;
    height: 1rem;
    margin-left: 18px;
    margin-left: 1rem;
    width: 27px;
    width: 1.5rem; }
    .horizontal-card__secondary-icon.\--blue {
      color: #3139f2;
      fill: #3139f2; }
    .horizontal-card__secondary-icon.\--fg-white {
      color: #ffffff;
      fill: #ffffff; }
    .horizontal-card__secondary-icon.\--fg-gray {
      color: #a7a8af;
      fill: #a7a8af; }
  .horizontal-card:hover .horizontal-card__image {
    opacity: 0.5; }

/*
 * Article card for blog index page
 */
.vertical-card {
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
  align-content: stretch;
  display: flex;
  flex-basis: auto;
  flex-direction: column;
  flex-grow: 1;
  flex-shrink: 1;
  justify-content: flex-start;
  width: 100%;
  /**
     *
     * Modifier: --bordered
     *
     * Adds blue border to left of article card
     */
  /**
     *
     * Modifier: --blue-border
     *
     * Adds blue border to left of article card
     */
  /**
     *
     * Modifier: --light-blue-border
     *
     * Adds light blue border to left of article card
     */
  /**
     *
     * Modifier: --yellow-border
     *
     * Adds yellow border to left of article card
     */
  /*
     * Part: __body
     *
     * Used for full width article card with no image
     * Helps set the flex direction on the body copy and date
     * so that they align properly
     */
  /*
     * Part: __header
     *
     * Styles the header for individual article-cards
     *
     * Adds a flat line height, font-size, margin-bottom and
     * makes header uppercase
     *
     * Also adds arrow
     */
  /*
     * Part: __image-container
     *
     * Wrapper around the article card image
     */
  /*
     * Part: __image
     *
     * Gives image full width and height to account for oversized images
     * causing container to stretch
     */
  /*
     * Part: __copy
     *
     * Give margin-bottom: auto to help align the date section to the bottom right
     */
  /*
     * Part: __secondary
     *
     * Styles and positions the date part of the component
     */
  /*
     * Animated the hover for the article card
     */ }
  .vertical-card.\--bordered {
    border-bottom-color: #a7a8af;
    border-bottom-width: 1px;
    border-left-color: transparent;
    border-left-width: 4px;
    border-right-color: #e9e9ec;
    border-right-width: 1px;
    border-style: solid;
    border-top-color: #e9e9ec;
    border-top-width: 1px; }
  .vertical-card.\--blue-border {
    border-left-color: #3139f2; }
  .vertical-card.\--light-blue-border {
    border-left-color: #4d64ff; }
  .vertical-card.\--yellow-border {
    border-left-color: #ecb500; }
  .vertical-card__body {
    align-self: stretch;
    display: flex;
    flex-basis: auto;
    flex-direction: column;
    flex-grow: 1;
    flex-shrink: 1;
    font-family: "Calibre-Regular", Arial, sans-serif;
    justify-content: space-between; }
    .vertical-card__body.\--bg-white {
      background-color: #ffffff; }
    .vertical-card__body.\--padded {
      padding: 19.999px;
      padding: 1.11111rem; }
    .vertical-card__body.\--padded-thin {
      padding: 14px;
      padding: 0.77778rem; }
  .vertical-card__header {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.25;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    margin-bottom: 27px;
    margin-bottom: 1.5rem;
    position: relative; }
    .vertical-card__header.\--small {
      font-size: 14px;
      font-size: 0.77778rem;
      line-height: 1.25; }
    .vertical-card__header.\--large {
      font-size: 23.999px;
      font-size: 1.33333rem;
      line-height: 1.25; }
  .vertical-card__image-container {
    height: 199.999px;
    height: 11.11111rem;
    background-color: #3139f2;
    overflow: hidden;
    position: relative;
    width: 100%; }
    .vertical-card__image-container.\--full-height {
      height: 100%; }
  .vertical-card__image {
    min-width: 399.999px;
    min-width: 22.22222rem;
    left: 50%;
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 100ms ease-in;
    width: 100%; }
  .vertical-card__copy {
    margin-bottom: auto; }
  .vertical-card__body-copy {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.5; }
    .vertical-card__body-copy.\--small {
      font-size: 14px;
      font-size: 0.77778rem;
      line-height: 1.5; }
    .vertical-card__body-copy.\--x-small {
      font-size: 12px;
      font-size: 0.66667rem;
      line-height: 1.5; }
  .vertical-card__secondary-container {
    align-items: center;
    display: flex;
    justify-content: space-between;
    width: 100%; }
    .vertical-card__secondary-container.\--flex-end {
      justify-content: flex-end; }
  .vertical-card__secondary-type {
    letter-spacing: 1px;
    letter-spacing: 0.05556rem;
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.5;
    align-self: flex-start;
    color: #6f707b;
    display: flex;
    font-family: "Calibre-Regular", Arial, sans-serif;
    justify-content: flex-start;
    text-decoration: none;
    text-transform: uppercase; }
  .vertical-card__secondary-icon {
    height: 18px;
    height: 1rem;
    margin-left: 18px;
    margin-left: 1rem;
    width: 27px;
    width: 1.5rem; }
    .vertical-card__secondary-icon.\--blue {
      color: #3139f2;
      fill: #3139f2; }
  .vertical-card:hover .vertical-card__image {
    opacity: 0.5; }

.section {
  margin-top: 19.999px;
  margin-top: 1.11111rem;
  padding-top: 34px;
  padding-top: 1.88889rem;
  padding-bottom: 34px;
  padding-bottom: 1.88889rem; }
  .section.\--gray {
    background-color: #f0f0f2; }
  .section.\--bg-blue-dark {
    background-color: #1d218c; }
  .section.\--bg-blue-darker {
    background-color: #1f2f4f; }
  .section.\--bg-midnight {
    background-color: #18243d; }
  .section.\--bg-yellow {
    background-color: #ffce48; }
  .section.\--top-none {
    margin-top: 0;
    padding-top: 0; }
  .section.\--glossary-hero {
    background-image: url("../../../img/glossary/glossary-hero@2x.jpg");
    background-position: top left;
    background-repeat: no-repeat;
    background-size: cover; }
  .section.\--hero {
    padding-top: 163.999px;
    padding-top: 9.11111rem;
    padding-bottom: 163.999px;
    padding-bottom: 9.11111rem; }
  .section.\--xl {
    padding-top: 54px;
    padding-top: 3rem;
    padding-bottom: 54px;
    padding-bottom: 3rem; }
  .section.\--small {
    padding-top: 19.999px;
    padding-top: 1.11111rem;
    padding-bottom: 19.999px;
    padding-bottom: 1.11111rem; }

.story__content .wp-caption-text, .story__lead-image-caption {
  color: #cfcfd4;
  display: block;
  font-family: "acumin-pro-extra-condensed", Arial, sans-serif;
  font-size: 18px;
  font-size: 1rem;
  letter-spacing: 0.4px;
  text-align: right;
  text-decoration: none;
  width: 100%; }

.story {
  margin-bottom: 54px;
  margin-bottom: 3rem; }
  .story__content {
    font-size: 19.999px;
    font-size: 1.11111rem;
    line-height: 1.5;
    color: #3f4148;
    font-family: "pt-serif", serif; }
    .story__content a {
      border-bottom: 1.999px solid #7ea9f2;
      border-bottom: 0.11111rem solid #7ea9f2;
      text-decoration: none;
      transition: border-bottom-color 0.2s ease-in-out; }
      .story__content a, .story__content a:active, .story__content a:hover, .story__content a:focus {
        color: #202020; }
      .story__content a:hover {
        border-bottom-color: #3139f2; }
    .story__content .copyright {
      font-size: 14px;
      font-size: 0.77778rem;
      line-height: 1.5;
      letter-spacing: 0.3px;
      letter-spacing: 0.01667rem;
      margin-bottom: 14px;
      margin-bottom: 0.77778rem;
      color: #6f707b;
      font-family: "Calibre-Regular", Arial, sans-serif;
      margin-top: -13.5px;
      margin-top: -0.75rem; }
    .story__content blockquote > p::before {
      content: url("../svg/quote-left-black.svg"); }
    .story__content blockquote > p::after {
      content: url("../svg/quote-right-black.svg"); }
    .story__content li {
      margin-bottom: 7px;
      margin-bottom: 0.38889rem; }
  .story__image-caption {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.5;
    display: inline;
    font-family: "Calibre-Regular", Arial, sans-serif; }
    .story__image-caption:after {
      content: "\00a0\00a0\00a0\00a0"; }
  .story__headline {
    font-size: 52px;
    font-size: 2.88889rem;
    line-height: 1.1; }
    @media (min-width: 47.4375rem) {
      .story__headline {
        font-size: 64px;
        font-size: 3.55556rem;
        line-height: 1.1;
        margin-bottom: 34px;
        margin-bottom: 1.88889rem; } }
  .story__lead-image {
    margin-bottom: 27px;
    margin-bottom: 1.5rem;
    width: 100%; }

/**
 * [ Breadcrumb navigation component ]
 * @type {[type]}
 */
.breadcrumb {
  margin-bottom: 7px;
  margin-bottom: 0.38889rem;
  list-style: none;
  margin-left: 0;
  /**
     * [ Breadcrumb item container ]
     * @type {[type]}
     */
  /**
     * [ Breadcrumb current page/item  ]
     * @type {[type]}
     */ }
  .breadcrumb__item-container {
    display: inline-block;
    position: relative; }
    .breadcrumb__item-container + .breadcrumb__item-container::before {
      background-size: 0.38889rem;
      height: 7px;
      height: 0.38889rem;
      width: 14px;
      width: 0.77778rem;
      background-image: url("../../../content/svg/caret-small-right.svg");
      background-position: center center;
      background-repeat: no-repeat;
      background-size: contain;
      content: '';
      display: inline-block;
      vertical-align: baseline; }
  .breadcrumb__item {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.92857;
    color: #3139f2;
    font-family: "Calibre-Regular", Arial, sans-serif;
    text-transform: none; }
    .breadcrumb__item.\--is-active {
      color: #6f707b; }

/**
 * [ Article Byline Container ]
 * @type {[type]}
 */
.byline {
  padding-top: 19.999px;
  padding-top: 1.11111rem;
  padding-bottom: 19.999px;
  padding-bottom: 1.11111rem;
  border-bottom: 1px solid #e9e9ec;
  border-bottom: 0.05556rem solid #e9e9ec;
  border-top: 1px solid #e9e9ec;
  border-top: 0.05556rem solid #e9e9ec;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin-bottom: 27px;
  /**
     * [ Article Byline Item Container ]
     * @type {[type]}
     */
  /**
     * [ Article Byline Content Styling ]
     * @type {[type]}
     */ }
  .byline__item-container {
    align-items: center;
    display: flex; }
  .byline__copy {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.5;
    letter-spacing: 1px;
    letter-spacing: 0.05556rem;
    color: #202020;
    font-family: "Calibre-Regular", Arial, sans-serif;
    text-transform: uppercase; }
    .byline__copy.\--semibold {
      font-family: "Calibre-Semibold", Arial, sans-serif; }
    .byline__copy.\--clear-transform {
      text-transform: none; }
    .byline__copy.\--fg-gray-dark {
      color: #6f707b; }
    .byline__copy.\--fg-blue {
      color: #3139f2; }

/**
 * Custom ordered list component
 *
 * Removes generic <ol> list styles and replaced them with custom
 * ordered list numbers using CSS counters.
 */
.ordered-list {
  counter-reset: step-counter;
  list-style: none;
  margin-bottom: 20px; }
  .ordered-list > li {
    padding-left: 27px;
    padding-left: 1.5rem;
    font-family: 'Calibre-Regular';
    position: relative; }
    .ordered-list > li::before {
      font-size: 18px;
      font-size: 1rem;
      line-height: 1.75;
      color: #3139f2;
      content: counter(step-counter);
      counter-increment: step-counter;
      font-family: 'Calibre-Semibold';
      left: 0;
      position: absolute;
      top: 0; }

/*
 * Box container
 *
 * Inherits from _object.box
 *
 * Contains styled portion of boxes
 */
.box {
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
  background-color: #f0f0f2; }
  .box.\--bg-white {
    background-color: #ffffff; }
  .box.\--bg-blue-light {
    background-color: #4d64ff; }
  .box.\--bg-trans-blue {
    background-color: rgba(49, 57, 242, 0.75); }
  .box.\--bg-blue-darker {
    background-color: #1f2f4f; }
  .box.\--bg-midnight {
    background-color: #18243d; }
  .box.\--bg-none {
    background: none; }
  .box.\--with-shadow {
    box-shadow: 0.05556rem 0.16667rem 0.55556rem 0 rgba(32, 32, 32, 0.25); }

/*
 * Component: Trending
 *
 * Used in conjunction with the Flag object to display articles in a list
 * with image and content next to each other
 */
.trending {
  margin-bottom: 27px;
  padding-left: 0; }
  @media (min-width: 47.4375rem) {
    .trending {
      padding-left: 90px;
      padding-left: 5rem; } }
  @media (min-width: 63.6875rem) {
    .trending {
      padding-left: 0; } }
  .trending__list > li {
    padding-top: 19.999px;
    padding-top: 1.11111rem;
    padding-bottom: 19.999px;
    padding-bottom: 1.11111rem;
    border-top: 1px solid #cfcfd4;
    /*
             * Animated the hover for the article card
             */ }
    .trending__list > li:last-of-type {
      border-bottom: 1px solid #cfcfd4; }
    .trending__list > li:hover .trending__image {
      opacity: 0.5; }
  .trending__image-container {
    height: 59.999px;
    height: 3.33333rem;
    width: 59.999px;
    width: 3.33333rem;
    background-color: #3139f2;
    overflow: hidden;
    position: relative; }
  .trending__image {
    min-width: 149.999px;
    min-width: 8.33333rem;
    left: 50%;
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 100ms ease-in;
    width: 100%; }
  .trending__item-header {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.25;
    font-family: "Calibre-Semibold", Arial, sans-serif; }

/**
 * Component: Editorial page fixed width layout
 *
 * Lays out the main content, social sidebar, and advertisement areas
 */
.editorial {
  padding-left: 14px;
  padding-left: 0.77778rem;
  padding-right: 14px;
  padding-right: 0.77778rem;
  margin-left: auto;
  margin-right: auto;
  width: 100%;
  /**
     * Part: Headline and byline container
     */
  /**
     * Part: content plus social wells
     */
  /**
     * Part: Social sidebar
     */
  /**
     * Part: Main editorial content area
     */
  /**
     * Part: Advertisement container
     */ }
  .editorial::after {
    clear: both !important;
    content: "" !important;
    display: block !important; }
  .editorial.\--push-down {
    margin-top: 27px;
    margin-top: 1.5rem; }
  @media (min-width: 47.4375rem) {
    .editorial {
      width: 680px;
      width: 37.77778rem;
      padding-left: 0;
      padding-right: 0; } }
  @media (min-width: 63.6875rem) {
    .editorial {
      width: 959.999px;
      width: 53.33333rem; } }
  @media (min-width: 77.4375rem) {
    .editorial {
      width: 1159.999px;
      width: 64.44444rem; } }
  .editorial__headline-byline {
    width: 100%; }
    @media (min-width: 47.4375rem) {
      .editorial__headline-byline {
        width: 599.999px;
        width: 33.33333rem;
        float: right; } }
    @media (min-width: 63.6875rem) {
      .editorial__headline-byline {
        margin-left: 30px;
        margin-left: 1.66667rem;
        width: 880px;
        width: 48.88889rem; } }
    @media (min-width: 77.4375rem) {
      .editorial__headline-byline {
        width: 1080px;
        width: 60rem; } }
  .editorial__content-plus-social {
    width: 100%; }
    .editorial__content-plus-social::after {
      clear: both !important;
      content: "" !important;
      display: block !important; }
    @media (min-width: 47.4375rem) {
      .editorial__content-plus-social {
        width: 680px;
        width: 37.77778rem;
        float: left; } }
    @media (min-width: 63.6875rem) {
      .editorial__content-plus-social {
        width: 619.999px;
        width: 34.44444rem; } }
    @media (min-width: 77.4375rem) {
      .editorial__content-plus-social {
        width: 799.999px;
        width: 44.44444rem; } }
  .editorial__social {
    float: left;
    width: 100%; }
    @media (max-width: 47.4375rem) {
      .editorial__social.\--clear-default {
        width: 50px;
        width: 2.77778rem; } }
    @media (min-width: 47.4375rem) {
      .editorial__social {
        width: 50px;
        width: 2.77778rem; } }
  .editorial__content {
    clear: left;
    float: left;
    width: 100%; }
    @media (max-width: 47.4375rem) {
      .editorial__content.\--clear-default {
        margin-left: 30px;
        margin-left: 1.66667rem;
        width: 599.999px;
        width: 33.33333rem; } }
    @media (min-width: 47.4375rem) {
      .editorial__content {
        margin-left: 30px;
        margin-left: 1.66667rem;
        width: 599.999px;
        width: 33.33333rem;
        clear: none; } }
    @media (min-width: 63.6875rem) {
      .editorial__content {
        width: 540px;
        width: 30rem; } }
    @media (min-width: 77.4375rem) {
      .editorial__content {
        width: 720px;
        width: 40rem; } }
  .editorial__advertisement {
    clear: left;
    float: left;
    width: 100%; }
    @media (min-width: 63.6875rem) {
      .editorial__advertisement {
        margin-left: 39.999px;
        margin-left: 2.22222rem;
        width: 300px;
        width: 16.66667rem;
        clear: none; } }
    @media (min-width: 77.4375rem) {
      .editorial__advertisement {
        margin-left: 59.999px;
        margin-left: 3.33333rem;
        clear: none; } }

.pull-quote {
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
  margin-top: 27px;
  margin-top: 1.5rem;
  padding-top: 14px;
  padding-top: 0.77778rem;
  padding-right: 41px;
  padding-right: 2.27778rem;
  padding-bottom: 14px;
  padding-bottom: 0.77778rem;
  padding-left: 41px;
  padding-left: 2.27778rem;
  position: relative;
  text-transform: uppercase; }
  .pull-quote > p {
    font-size: 36px;
    font-size: 2rem;
    line-height: 1.25;
    font-family: "acumin-pro-extra-condensed", Arial, sans-serif;
    margin-bottom: 0 !important; }
    .pull-quote > p::before {
      content: url("../svg/quote-left-blue.svg");
      left: 0;
      position: absolute;
      top: 0; }
    .pull-quote > p::after {
      margin-left: 19.999px;
      margin-left: 1.11111rem;
      bottom: 0;
      content: url("../svg/quote-right-blue.svg");
      position: absolute; }

.social-share {
  align-items: center;
  border: 3.999px solid #e9e9ec;
  border: 0.22222rem solid #e9e9ec;
  display: none;
  flex-direction: row;
  justify-content: flex-end;
  position: relative;
  text-align: right; }
  @media (min-width: 39.9375rem) {
    .social-share {
      margin-top: 84.999px;
      margin-top: 4.72222rem;
      margin-bottom: 84.999px;
      margin-bottom: 4.72222rem; } }
  @media (min-width: 47.4375rem) {
    .social-share {
      display: flex;
      flex-wrap: wrap; } }
  @media (min-width: 47.4375rem) {
    .social-share.\--fixed {
      display: block;
      padding: 0; } }
  .social-share__label {
    display: none; }
  .social-share__icon {
    color: #3139f2;
    fill: #3139f2;
    height: 22.5px;
    height: 1.25rem;
    width: 22.5px;
    width: 1.25rem; }
    .social-share__icon.\--small {
      height: 18px;
      height: 1rem;
      width: 18px;
      width: 1rem; }
    .social-share__icon.\--wide {
      width: 30.599px;
      width: 1.7rem; }
  .social-share__button {
    align-items: center;
    background: #ffffff;
    border: none;
    cursor: pointer;
    display: flex;
    height: 45px;
    height: 2.5rem;
    justify-content: center;
    overflow: hidden;
    padding: 6.75px;
    padding: 0.375rem;
    text-align: center;
    transition: color 0.2s ease-in-out, fill 0.2s ease-in-out;
    width: 42.3px;
    width: 2.35rem; }
    @media (min-width: 39.9375rem) {
      .social-share__button {
        width: 45px;
        width: 2.5rem; } }
    .social-share__button.\--small {
      padding: 5.399px;
      padding: 0.3rem; }
    .social-share__button.\--less ~ .social-share__button {
      display: none; }
    .social-share__button:hover .social-share__icon {
      color: #202020;
      fill: #202020; }

.br-ad {
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
  text-align: center;
  /**
     *  Modifier: --negative-top: used to bring top of ad placement flush with headline
     */ }
  .br-ad.\--leaderboard {
    width: 727.999px;
    width: 40.44444rem;
    display: none;
    margin-left: auto;
    margin-right: auto; }
    @media (min-width: 63.6875rem) {
      .br-ad.\--leaderboard {
        display: block; } }
  .br-ad.\--mobile-content-units {
    padding-top: 34px;
    padding-top: 1.88889rem;
    padding-bottom: 34px;
    padding-bottom: 1.88889rem;
    margin: 0 auto; }
  .br-ad.\--footer-adhesive {
    background-color: #ffffff;
    bottom: 0;
    margin-bottom: 0;
    position: fixed;
    width: 100%; }
  .br-ad.\--leaderboard-top {
    margin-bottom: 34px;
    margin-bottom: 1.88889rem;
    width: 970px;
    width: 53.88889rem; }
    .br-ad.\--leaderboard-top .br-ad__label {
      right: 120px;
      right: 6.66667rem;
      position: relative; }
  .br-ad.\--leaderboard-bottom {
    margin-bottom: 0; }
  @media (min-width: 77.4375rem) {
    .br-ad.\--negative-top {
      margin-top: -23.4px;
      margin-top: -1.3rem; } }
  .br-ad__label {
    font-size: 12px;
    font-size: 0.66667rem;
    line-height: 1.25;
    letter-spacing: 1px;
    letter-spacing: 0.05556rem;
    color: #6f707b;
    font-family: "Calibre-Regular", Arial, sans-serif;
    text-align: right;
    text-transform: uppercase; }

.around-the-web__image {
  height: 79.999px;
  height: 4.44444rem;
  width: 120px;
  width: 6.66667rem; }

.around-the-web__header-container {
  align-items: flex-end;
  display: flex;
  justify-content: space-between; }

.around-the-web__powered-by {
  font-size: 14px;
  font-size: 0.77778rem;
  line-height: 1.92857;
  letter-spacing: 1px;
  letter-spacing: 0.05556rem;
  color: #6f707b;
  font-family: "Calibre-Regular", Arial, sans-serif;
  text-transform: uppercase; }

.social-block {
  border: 1.999px solid #4d64ff;
  border: 0.11111rem solid #4d64ff;
  display: inline-flex; }
  .social-block__label {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.92857;
    letter-spacing: 1px;
    letter-spacing: 0.05556rem;
    color: #ffffff;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    text-transform: uppercase; }
  .social-block__svg-container {
    height: 54px;
    height: 3rem;
    padding: 7px;
    padding: 0.38889rem;
    width: 54px;
    width: 3rem;
    align-items: center;
    display: flex;
    justify-content: center;
    transition: background-color 0.2s ease-in-out; }
    .social-block__svg-container.\--bg-blue {
      background-color: #4d64ff; }
    .social-block__svg-container.\--bg-midnight {
      background-color: #18243d; }
    .social-block__svg-container.\--small {
      height: 41px;
      height: 2.27778rem;
      width: 41px;
      width: 2.27778rem; }
  .social-block__svg-icon {
    height: 27px;
    height: 1.5rem;
    width: 27px;
    width: 1.5rem;
    color: #ffffff;
    fill: #ffffff; }
    .social-block__svg-icon.\--small {
      height: 20.5px;
      height: 1.13889rem;
      width: 20.5px;
      width: 1.13889rem; }

.table-inline {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5;
  font-family: "Calibre-Regular", Arial, sans-serif; }
  .table-inline.\--numerical th {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.92857;
    letter-spacing: 0.3px;
    letter-spacing: 0.01667rem;
    border-top-color: #50525a;
    border-top-width: 1px;
    border-top-width: 0.05556rem;
    color: #6f707b;
    font-family: "Calibre-Semibold", Arial, sans-serif; }
  .table-inline.\--numerical td:not(:first-of-type) {
    font-size: 16px;
    font-size: 0.88889rem;
    line-height: 1.6875;
    font-family: 'roboto', sans-serif; }
  .table-inline.\--numerical th,
  .table-inline.\--numerical td {
    text-align: right; }
  .table-inline__heading {
    font-size: 23.999px;
    font-size: 1.33333rem;
    line-height: 1.125;
    margin-bottom: 27px;
    margin-bottom: 1.5rem;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    text-align: left; }
  .table-inline th,
  .table-inline td {
    text-align: center; }
    .table-inline th:first-of-type,
    .table-inline td:first-of-type {
      text-align: left; }
    .table-inline th:last-of-type,
    .table-inline td:last-of-type {
      text-align: right; }

.numeral {
  font-family: "acumin-pro-extra-condensed", Arial, sans-serif; }
  .numeral.\--calibre-semibold {
    font-family: "Calibre-Semibold", Arial, sans-serif; }
  .numeral.\--calibre-regular {
    font-family: "Calibre-Regular", Arial, sans-serif; }
  .numeral.\--fg-white {
    color: #ffffff; }
  .numeral.\--alpha {
    font-size: 72px;
    font-size: 4rem;
    line-height: 1.1; }
    .numeral.\--alpha .numeral__accent {
      top: -27px;
      top: -1.5rem; }
      .numeral.\--alpha .numeral__accent.\--currency, .numeral.\--alpha .numeral__accent.\--percentage {
        top: -22.5px;
        top: -1.25rem; }
  .numeral.\--beta {
    font-size: 52px;
    font-size: 2.88889rem;
    line-height: 1.25; }
    .numeral.\--beta .numeral__accent {
      top: -22.5px;
      top: -1.25rem; }
      .numeral.\--beta .numeral__accent.\--currency, .numeral.\--beta .numeral__accent.\--percentage {
        top: -18px;
        top: -1rem; }
      .numeral.\--beta .numeral__accent.\--text {
        font-size: 35%;
        left: -25.2px;
        left: -1.4rem;
        top: 0; }
  .numeral.\--gamma {
    font-size: 36px;
    font-size: 2rem;
    line-height: 1.5; }
    .numeral.\--gamma .numeral__accent {
      top: -14px;
      top: -0.77778rem; }
      .numeral.\--gamma .numeral__accent.\--currency, .numeral.\--gamma .numeral__accent.\--percentage {
        top: -10.799px;
        top: -0.6rem; }
  .numeral.\--delta {
    font-size: 28px;
    font-size: 1.55556rem;
    line-height: 1.5; }
    .numeral.\--delta .numeral__accent {
      top: -7px;
      top: -0.38889rem; }
      .numeral.\--delta .numeral__accent.\--currency, .numeral.\--delta .numeral__accent.\--percentage {
        top: -9px;
        top: -0.5rem; }
  .numeral.\--epsilon {
    font-size: 23.999px;
    font-size: 1.33333rem;
    line-height: 1.5; }
    .numeral.\--epsilon .numeral__accent {
      top: -7px;
      top: -0.38889rem; }
      .numeral.\--epsilon .numeral__accent.\--currency, .numeral.\--epsilon .numeral__accent.\--percentage {
        top: -9px;
        top: -0.5rem; }
  .numeral.\--zeta {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.33; }
    .numeral.\--zeta .numeral__accent {
      top: -12px;
      top: -0.66667rem; }
      .numeral.\--zeta .numeral__accent.\--currency, .numeral.\--zeta .numeral__accent.\--percentage {
        top: -9px;
        top: -0.5rem; }
  .numeral__accent {
    font-size: 50%;
    margin-left: 3.999px;
    margin-left: 0.22222rem;
    position: relative; }
    .numeral__accent.\--currency {
      margin-left: 0; }
    .numeral__accent.\--with-secondary {
      top: -18px;
      top: -1rem; }
    .numeral__accent.\--bottom {
      top: 0 !important; }
  .numeral__secondary {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.2;
    bottom: 14px;
    bottom: 0.77778rem;
    right: -12px;
    right: -0.66667rem;
    width: 55.999px;
    width: 3.11111rem;
    position: absolute; }
    .numeral__secondary.\--fg-green {
      color: #20cb7e; }
    .numeral__secondary.\--fg-red {
      color: #fa6e56; }

#csstyle .\+calibre-accent-top {
  margin-left: 1.999px;
  margin-left: 0.11111rem;
  top: -5.399px;
  top: -0.3rem; }

.homepage__subnav {
  font-size: 14px;
  font-size: 0.77778rem;
  line-height: 1.5;
  font-family: "Calibre-Regular", Arial, sans-serif; }

.homepage__subnav-header:hover {
  color: #3139f2; }

.homepage__card-copy {
  min-height: 140px;
  min-height: 7.77778rem; }

.homepage__copy {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5;
  font-family: "Calibre-Regular", Arial, sans-serif; }
  .homepage__copy.\--semibold {
    font-family: "Calibre-Semibold", Arial, sans-serif; }
  .homepage__copy.\--with-border {
    border-bottom: 1px solid #cfcfd4;
    border-bottom: 0.05556rem solid #cfcfd4; }
  .homepage__copy.\--fg-blue {
    color: #3139f2; }
  .homepage__copy.\--fg-gray {
    color: #a7a8af; }
  .homepage__copy.\--fg-red {
    color: #fa6e56; }
  .homepage__copy.\--fg-white {
    color: #ffffff; }
  .homepage__copy.\--uppercase {
    letter-spacing: 1px;
    letter-spacing: 0.05556rem;
    text-transform: uppercase; }
  .homepage__copy.\--small {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.92857; }
  .homepage__copy.\--medium {
    font-size: 16px;
    font-size: 0.88889rem;
    line-height: 1.6875; }

.homepage__rate-tab {
  display: flex;
  flex-direction: column;
  width: 100%; }
  .homepage__rate-tab.\--is-active {
    background-color: #263a62;
    border-bottom: 3px solid #3139f2;
    border-bottom: 0.16667rem solid #3139f2;
    padding: 27px 27px 23.999px;
    padding: 1.5rem 1.5rem 1.33333rem;
    position: relative; }
    .homepage__rate-tab.\--is-active::after {
      bottom: -14px;
      bottom: -0.77778rem;
      border-left: 14px solid transparent;
      border-left: 0.77778rem solid transparent;
      border-right: 14px solid transparent;
      border-right: 0.77778rem solid transparent;
      border-top: 14px solid #3139f2;
      border-top: 0.77778rem solid #3139f2;
      height: 0;
      left: calc(50% - (0.77778rem / 2));
      position: absolute;
      width: 0; }
  .homepage__rate-tab:hover {
    background-color: #152036;
    cursor: pointer; }

.homepage__rate-tab-headline {
  order: 1; }
  @media (min-width: 47.4375rem) {
    .homepage__rate-tab-headline {
      order: 0; } }

.homepage__rate-module {
  min-height: 259.999px;
  min-height: 14.44444rem;
  overflow: hidden;
  position: relative; }

.homepage__rate-slide {
  left: 14px;
  left: 0.77778rem;
  background-color: #1f2f4f;
  opacity: 0;
  position: absolute;
  transform: translateY(-260px);
  transition: transform 500ms ease-in;
  width: 100%;
  z-index: -5; }
  .homepage__rate-slide.\--is-active {
    opacity: 1;
    transform: translateY(0);
    z-index: 5; }
    .homepage__rate-slide.\--is-active.\--is-pushed {
      transform: translateY(260px); }

.homepage__rate-slide-header {
  color: #ffffff;
  display: block; }

.homepage__link:hover {
  color: #3139f2; }

.homepage__area-chart .highcharts-background {
  color: none;
  fill: none; }

.homepage__stretch-col {
  display: flex;
  flex-direction: column;
  justify-content: space-between; }

.homepage__flex-row {
  display: flex;
  flex-direction: row;
  justify-content: space-between; }
  .homepage__flex-row.\--align-baseline {
    align-items: baseline; }

.homepage__pointer {
  cursor: pointer; }

.compare-rates {
  min-height: 570px;
  min-height: 31.66667rem;
  overflow: hidden;
  position: relative; }
  .compare-rates__hero {
    background-repeat: no-repeat;
    background-size: cover;
    height: 100%;
    left: 0;
    opacity: 0;
    position: absolute;
    top: 0;
    transition: opacity 250ms ease-in;
    width: 100%; }
    .compare-rates__hero.\--is-active {
      opacity: 1; }
    .compare-rates__hero.\--default {
      background-image: url("../../../img/homepage/compare-rates-widget/desktop/bg-homepage-hero@2x.jpg"); }
    .compare-rates__hero.\--mortgage {
      background-image: url("../../../img/homepage/compare-rates-widget/desktop/bg-mortgage-hero@2x.jpg"); }
    .compare-rates__hero.\--personal-loans {
      background-image: url("../../../img/homepage/compare-rates-widget/desktop/bg-pl-hero@2x.jpg"); }
    .compare-rates__hero.\--savings-accounts {
      background-image: url("../../../img/homepage/compare-rates-widget/desktop/bg-savings-hero@2x.jpg"); }
    .compare-rates__hero.\--credit-cards {
      background-image: url("../../../img/homepage/compare-rates-widget/desktop/bg-cc-hero@2x.jpg"); }
    .compare-rates__hero.\--auto {
      background-image: url("../../../img/homepage/compare-rates-widget/desktop/bg-auto-hero@2x.jpg"); }
  .compare-rates__default-header {
    color: #ffffff;
    font-family: "Calibre-Semibold", Arial, sans-serif; }
  .compare-rates__option {
    box-shadow: 0.05556rem 0.16667rem 0.55556rem 0 rgba(32, 32, 32, 0.25);
    cursor: pointer;
    overflow: hidden;
    position: relative;
    transition: background-color 250ms ease-in, color 250ms ease-in; }
    .compare-rates__option:hover {
      background-color: #4d64ff; }
      .compare-rates__option:hover,
      .compare-rates__option:hover a {
        color: #ffffff; }
        .compare-rates__option:hover .compare-rates__option-icon,
        .compare-rates__option:hover a .compare-rates__option-icon {
          color: #ffffff;
          fill: #ffffff; }
  .compare-rates__option-icon {
    margin-left: auto;
    margin-right: auto;
    transition: color 250ms ease-in, fill 250ms ease-in; }
  .compare-rates__slide {
    top: 120px;
    top: 6.66667rem;
    opacity: 0;
    position: absolute;
    transform: translateX(100vw);
    transition: transform 500ms ease-in, opacity 500ms ease-in;
    width: calc(100vw - (1.55556rem)); }
    .compare-rates__slide.\--is-active {
      opacity: 1;
      transform: translateX(0) translateX(0.77778rem); }
    .compare-rates__slide.\--is-pushed {
      opacity: 0;
      transform: translateX(-100vw); }
    @media (min-width: 63.6875rem) {
      .compare-rates__slide {
        width: 750px;
        width: 41.66667rem; }
        .compare-rates__slide.\--is-active {
          transform: translateX(50vw) translateX(-20.83334rem); } }
    .compare-rates__slide.\--with-shadow {
      box-shadow: 0.05556rem 0.16667rem 0.55556rem 0 rgba(32, 32, 32, 0.25); }
  .compare-rates__slide-content {
    min-height: 275px;
    min-height: 15.27778rem; }
  .compare-rates__slide-legend {
    align-items: center;
    display: flex;
    justify-content: space-between; }

.mobile-compare-rates {
  height: 65vh;
  position: relative;
  z-index: 5; }
  .mobile-compare-rates__slide {
    top: 55.999px;
    top: 3.11111rem;
    background-repeat: no-repeat;
    background-size: cover;
    display: flex;
    flex-direction: column;
    height: calc(100vh - 3.11111rem);
    justify-content: space-between;
    position: fixed;
    transform: translateX(100vw);
    transition: transform ease-in;
    transition-duration: 400ms;
    width: 100vw; }
    .mobile-compare-rates__slide.\--is-default {
      background-image: url("../../../img/homepage/compare-rates-widget/mobile/bg-default@2x.jpg");
      height: 65vh;
      justify-content: flex-end;
      position: absolute;
      top: 0;
      transition-duration: 600ms; }
      .mobile-compare-rates__slide.\--is-default.\--is-active {
        transform: translateX(calc(50% - (50vw + 0.77778rem)));
        transition-duration: 400ms;
        width: 100vw; }
    .mobile-compare-rates__slide.\--is-pushed {
      transform: translateX(-100vw); }
    .mobile-compare-rates__slide.\--is-active {
      transform: translateX(calc(50% - (50vw + 0.77778rem))); }
    .mobile-compare-rates__slide.\--bg-mortgage-hero {
      background-image: url("../../../img/homepage/compare-rates-widget/mobile/bg-mortgage@2x.jpg"); }
    .mobile-compare-rates__slide.\--bg-pl-hero {
      background-image: url("../../../img/homepage/compare-rates-widget/mobile/bg-personal-loans@2x.jpg"); }
    .mobile-compare-rates__slide.\--bg-savings-hero {
      background-image: url("../../../img/homepage/compare-rates-widget/mobile/bg-savings@2x.jpg"); }
    .mobile-compare-rates__slide.\--bg-cc-hero {
      background-image: url("../../../img/homepage/compare-rates-widget/mobile/bg-credit-cards@2x.jpg"); }
    .mobile-compare-rates__slide.\--bg-auto-hero {
      background-image: url("../../../img/homepage/compare-rates-widget/mobile/bg-auto@2x.jpg"); }
  .mobile-compare-rates__header {
    font-size: 28px;
    font-size: 1.55556rem;
    line-height: 1.1;
    color: #ffffff;
    font-family: "Calibre-Semibold", Arial, sans-serif; }
    .mobile-compare-rates__header.\--large {
      font-size: 36px;
      font-size: 2rem;
      line-height: 1.1; }
  .mobile-compare-rates__option {
    border-left: 3px solid #3139f2;
    border-left: 0.16667rem solid #3139f2;
    overflow: hidden;
    text-transform: capitalize; }
  .mobile-compare-rates__slide-content {
    padding-left: 14px;
    padding-left: 0.77778rem;
    padding-right: 14px;
    padding-right: 0.77778rem;
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: center; }
    .mobile-compare-rates__slide-content.\--is-default {
      justify-content: flex-end; }
  .mobile-compare-rates__slide-header::after {
    bottom: -14px;
    bottom: -0.77778rem;
    border-left: 14px solid transparent;
    border-left: 0.77778rem solid transparent;
    border-right: 14px solid transparent;
    border-right: 0.77778rem solid transparent;
    border-top: 14px solid rgba(49, 57, 242, 0.75);
    border-top: 0.77778rem solid rgba(49, 57, 242, 0.75);
    height: 0;
    left: calc(50% - 0.38889rem);
    position: absolute;
    width: 0; }
  .mobile-compare-rates__slide-legend {
    display: flex;
    justify-content: space-between; }

.icon {
  width: 27px;
  width: 1.5rem;
  height: 27px;
  height: 1.5rem;
  color: inherit;
  display: inline-block;
  position: relative;
  vertical-align: middle; }
  .icon.\--fg-blue-light {
    color: #4d64ff;
    fill: #4d64ff; }
  .icon.\--fg-white {
    color: #ffffff;
    fill: #ffffff; }
  .icon.\--fg-blue {
    color: #3139f2;
    fill: #3139f2; }
  .icon.\--fg-charcoal {
    color: #202020;
    fill: #202020; }
  .icon.\--fg-red {
    color: #fa6e56;
    fill: #fa6e56; }
  .icon.\--fg-green {
    color: #20cb7e;
    fill: #20cb7e; }
  .icon.\--xxs {
    width: 7px;
    width: 0.38889rem;
    height: 7px;
    height: 0.38889rem; }
  .icon.\--xs {
    width: 14px;
    width: 0.77778rem;
    height: 14px;
    height: 0.77778rem; }
  .icon.\--sm {
    width: 19.999px;
    width: 1.11111rem;
    height: 19.999px;
    height: 1.11111rem; }
  .icon.\--md {
    width: 34px;
    width: 1.88889rem;
    height: 34px;
    height: 1.88889rem; }
  .icon.\--lg {
    width: 41px;
    width: 2.27778rem;
    height: 41px;
    height: 2.27778rem; }
  .icon.\--xl {
    width: 54px;
    width: 3rem;
    height: 54px;
    height: 3rem; }
  .icon__glyph {
    display: block;
    fill: currentColor;
    height: 100%;
    vertical-align: middle;
    width: 100%; }
    .icon__glyph.\--flip {
      transform: rotate(90deg); }

.sweepstakes__copy {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5;
  font-family: "Calibre-Regular", Arial, sans-serif; }
  .sweepstakes__copy.\--fg-white {
    color: #ffffff; }
  .sweepstakes__copy.\--fg-blue-light {
    color: #4d64ff; }

.sweepstakes__arrow {
  bottom: -39.999px;
  bottom: -2.22222rem;
  margin-left: -39.999px;
  margin-left: -2.22222rem;
  left: 50%;
  position: absolute; }

.sweepstakes__headline-green {
  color: #82e2b7; }

.sweepstakes__headline-yellow {
  color: #ffce48; }

.sweepstakes__anchor {
  text-decoration: underline; }

.sweepstakes__headline-with-lines {
  padding-left: 14px;
  padding-left: 0.77778rem;
  padding-right: 14px;
  padding-right: 0.77778rem;
  margin-top: -27px;
  margin-top: -1.5rem;
  color: #ffffff;
  display: inline-block;
  position: relative;
  text-align: center; }
  @media (min-width: 63.6875rem) {
    .sweepstakes__headline-with-lines::after, .sweepstakes__headline-with-lines::before {
      width: 444.999px;
      width: 24.72222rem;
      height: 5px;
      height: 0.27778rem;
      background: #7ea9f2;
      content: '';
      display: block;
      position: absolute;
      top: 50%; }
    .sweepstakes__headline-with-lines::after {
      left: 100%; }
    .sweepstakes__headline-with-lines::before {
      right: 100%; } }

.sweepstakes__headline-left-line {
  display: inline-block;
  position: relative; }
  .sweepstakes__headline-left-line.\--fg-white {
    color: #ffffff; }
    .sweepstakes__headline-left-line.\--fg-white::before {
      background: #ffffff; }
  .sweepstakes__headline-left-line.\--fg-blue-light {
    color: #4d64ff; }
    .sweepstakes__headline-left-line.\--fg-blue-light::before {
      background: #4d64ff; }
  .sweepstakes__headline-left-line::before {
    width: 444.999px;
    width: 24.72222rem;
    height: 1.999px;
    height: 0.11111rem;
    content: '';
    display: block;
    position: absolute;
    top: 50%; }
  .sweepstakes__headline-left-line::before {
    left: -473.999px;
    left: -26.33333rem; }

@media (min-width: 63.6875rem) {
  .sweepstakes__bordered-box {
    border-left: 5px solid #7ea9f2;
    border-left: 0.27778rem solid #7ea9f2;
    border-right: 5px solid #7ea9f2;
    border-right: 0.27778rem solid #7ea9f2; } }

.sweepstakes__countdown-bg {
  background: url("../../../img/sweepstakes/countdown-background.jpg") top center no-repeat;
  background-size: cover; }

.sweepstakes__winners-bg {
  background: url("../../../img/sweepstakes/winner-background.jpg") top center no-repeat;
  background-size: cover; }

.numeral {
  font-family: "acumin-pro-extra-condensed", Arial, sans-serif; }
  .numeral.\--calibre-semibold {
    font-family: "Calibre-Semibold", Arial, sans-serif; }
  .numeral.\--calibre-regular {
    font-family: "Calibre-Regular", Arial, sans-serif; }
  .numeral.\--fg-white {
    color: #ffffff; }
  .numeral.\--alpha {
    font-size: 72px;
    font-size: 4rem;
    line-height: 1.1; }
    .numeral.\--alpha .numeral__accent {
      top: -27px;
      top: -1.5rem; }
      .numeral.\--alpha .numeral__accent.\--currency, .numeral.\--alpha .numeral__accent.\--percentage {
        top: -22.5px;
        top: -1.25rem; }
  .numeral.\--beta {
    font-size: 52px;
    font-size: 2.88889rem;
    line-height: 1.25; }
    .numeral.\--beta .numeral__accent {
      top: -22.5px;
      top: -1.25rem; }
      .numeral.\--beta .numeral__accent.\--currency, .numeral.\--beta .numeral__accent.\--percentage {
        top: -18px;
        top: -1rem; }
      .numeral.\--beta .numeral__accent.\--text {
        font-size: 35%;
        left: -25.2px;
        left: -1.4rem;
        top: 0; }
  .numeral.\--gamma {
    font-size: 36px;
    font-size: 2rem;
    line-height: 1.5; }
    .numeral.\--gamma .numeral__accent {
      top: -14px;
      top: -0.77778rem; }
      .numeral.\--gamma .numeral__accent.\--currency, .numeral.\--gamma .numeral__accent.\--percentage {
        top: -10.799px;
        top: -0.6rem; }
  .numeral.\--delta {
    font-size: 28px;
    font-size: 1.55556rem;
    line-height: 1.5; }
    .numeral.\--delta .numeral__accent {
      top: -7px;
      top: -0.38889rem; }
      .numeral.\--delta .numeral__accent.\--currency, .numeral.\--delta .numeral__accent.\--percentage {
        top: -9px;
        top: -0.5rem; }
  .numeral.\--epsilon {
    font-size: 23.999px;
    font-size: 1.33333rem;
    line-height: 1.5; }
    .numeral.\--epsilon .numeral__accent {
      top: -7px;
      top: -0.38889rem; }
      .numeral.\--epsilon .numeral__accent.\--currency, .numeral.\--epsilon .numeral__accent.\--percentage {
        top: -9px;
        top: -0.5rem; }
  .numeral.\--zeta {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.33; }
    .numeral.\--zeta .numeral__accent {
      top: -12px;
      top: -0.66667rem; }
      .numeral.\--zeta .numeral__accent.\--currency, .numeral.\--zeta .numeral__accent.\--percentage {
        top: -9px;
        top: -0.5rem; }
  .numeral__accent {
    font-size: 50%;
    margin-left: 3.999px;
    margin-left: 0.22222rem;
    position: relative; }
    .numeral__accent.\--currency {
      margin-left: 0; }
    .numeral__accent.\--with-secondary {
      top: -18px;
      top: -1rem; }
    .numeral__accent.\--bottom {
      top: 0 !important; }
  .numeral__secondary {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.2;
    bottom: 14px;
    bottom: 0.77778rem;
    right: -12px;
    right: -0.66667rem;
    width: 55.999px;
    width: 3.11111rem;
    position: absolute; }
    .numeral__secondary.\--fg-green {
      color: #20cb7e; }
    .numeral__secondary.\--fg-red {
      color: #fa6e56; }

#csstyle .\+calibre-accent-top {
  margin-left: 1.999px;
  margin-left: 0.11111rem;
  top: -5.399px;
  top: -0.3rem; }

/**
 * Image alignment classes for aligning images left, right, center through
 * the wordpress alignment UI within articles.
 *
 * DO NOT USE FOR BUILDING COMPONENTS!!!
 **/
.alignleft {
  margin-right: 19.999px;
  margin-right: 1.11111rem;
  margin-bottom: 14px;
  margin-bottom: 0.77778rem;
  float: left; }

.aligncenter {
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
  display: block;
  margin-left: auto;
  margin-right: auto; }

.alignright {
  margin-bottom: 14px;
  margin-bottom: 0.77778rem;
  margin-left: 19.999px;
  margin-left: 1.11111rem;
  float: right; }

.global-navigation {
  height: 59.999px;
  height: 3.33333rem;
  background-color: #ffffff;
  border-top: 1px solid #cfcfd4;
  border-top: 0.05556rem solid #cfcfd4;
  display: flex;
  position: relative;
  top: 0;
  transition: transform 0.25s ease-in, opacity 0.25s ease-in, visibility 0.25s ease-in;
  width: 100%;
  z-index: 20; }
  .global-navigation.\--is-fixed {
    position: fixed;
    transform: translateY(0); }
  .global-navigation.\--slide-in {
    transform: translateY(0); }
  .global-navigation.\--slide-out {
    transform: translateY(-60px); }
  .global-navigation__flex-container {
    border-bottom: 1.999px solid #4d64ff;
    border-bottom: 0.11111rem solid #4d64ff;
    display: inline-flex;
    justify-content: space-between;
    width: 100%; }
    .global-navigation__flex-container.\--is-mobile {
      justify-content: flex-end; }
  .global-navigation__secondary-container {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.5;
    align-items: center;
    font-family: "Calibre-Regular", Arial, sans-serif; }
  .global-navigation__horizontal-nav {
    height: 59px;
    height: 3.27778rem;
    letter-spacing: 1px;
    letter-spacing: 0.05556rem;
    border-left: 1px solid #cfcfd4;
    border-left: 0.05556rem solid #cfcfd4;
    display: inline-flex;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    margin-left: 0; }
  .global-navigation__horizontal-item-container {
    font-size: 12px;
    font-size: 0.66667rem;
    line-height: 1.5;
    align-items: center;
    border-bottom: 1.999px solid #4d64ff;
    border-bottom: 0.11111rem solid #4d64ff;
    color: #202020;
    display: flex;
    text-transform: none; }
    @media (min-width: 1080px) {
      .global-navigation__horizontal-item-container {
        font-size: 14px;
        font-size: 0.77778rem;
        line-height: 1.5; } }
    .global-navigation__horizontal-item-container:hover {
      background-color: #f0f0f2;
      border-bottom: 1.999px solid #f0f0f2;
      border-bottom: 0.11111rem solid #f0f0f2; }
      .global-navigation__horizontal-item-container:hover .global-navigation__horizontal-subnav {
        top: 59px;
        top: 3.27778rem;
        max-height: 511.999px;
        max-height: 28.44444rem;
        opacity: 1;
        visibility: visible;
        z-index: 15; }
  .global-navigation__horizontal-item {
    padding: 14px;
    padding: 0.77778rem;
    color: #202020;
    text-transform: uppercase; }
  .global-navigation__horizontal-subnav {
    background-color: #f0f0f2;
    box-shadow: 0 0.16667rem 0.27778rem rgba(32, 32, 32, 0.3);
    color: #202020;
    left: 0;
    max-height: 0;
    min-width: 100%;
    opacity: 0;
    position: absolute;
    top: 0;
    visibility: hidden;
    z-index: -5; }
    .global-navigation__horizontal-subnav.\--with-ad {
      display: flex;
      justify-content: space-between; }
  .global-navigation__horizontal-subnav-ad {
    min-width: 374px;
    min-width: 20.77778rem; }
  .global-navigation__horizontal-subnav-item {
    font-size: 16px;
    font-size: 0.88889rem;
    line-height: 1.6875;
    padding-top: 3.499px;
    padding-top: 0.19444rem;
    padding-bottom: 3.499px;
    padding-bottom: 0.19444rem;
    display: inline-block;
    font-family: "Calibre-Regular", Arial, sans-serif;
    letter-spacing: normal;
    position: relative;
    transition: translate 250ms ease-in; }
    .global-navigation__horizontal-subnav-item:hover {
      color: #3139f2;
      transform: translateX(20px); }
      .global-navigation__horizontal-subnav-item:hover::before {
        height: 10px;
        height: 0.55556rem;
        left: -25px;
        left: -1.38889rem;
        top: 12px;
        top: 0.66667rem;
        content: url("../svg/drop-arrow.svg");
        display: block;
        opacity: 1;
        position: absolute;
        transform: rotate(-90deg);
        transition: width 250ms ease-in; }
      .global-navigation__horizontal-subnav-item:hover .global-navigation__subnav-arrow {
        width: 14px;
        width: 0.77778rem;
        opacity: 1; }
  .global-navigation__subnav-arrow {
    height: 10px;
    height: 0.55556rem;
    opacity: 0;
    transform: rotate(-90deg);
    transition: width 250ms ease-in;
    width: 0; }
  .global-navigation__slide {
    min-width: 374.999px;
    min-width: 20.83333rem;
    height: 100vh;
    left: 0;
    position: absolute;
    transform: translateX(-105%);
    transition: transform 500ms cubic-bezier(0, 1, 0, 1);
    z-index: 20; }
    .global-navigation__slide.\--is-active {
      transform: translateX(0); }
  .global-navigation__nav {
    padding-bottom: 124.999px;
    padding-bottom: 6.94444rem;
    background-color: #ffffff;
    box-shadow: 0 0.5rem 1.1rem rgba(80, 82, 90, 0.5);
    height: 100%;
    overflow-y: scroll;
    position: relative; }
  .global-navigation__subnav {
    min-width: 374.999px;
    min-width: 20.83333rem;
    padding-bottom: 59.999px;
    padding-bottom: 3.33333rem;
    left: -374.999px;
    left: -20.83333rem;
    background-color: #ffffff;
    box-shadow: 0 0.5rem 1.1rem rgba(80, 82, 90, 0.5);
    min-height: 100%;
    position: absolute;
    top: 0;
    transition: transform 500ms cubic-bezier(0, 1, 0, 1), left 500ms;
    z-index: 10; }
    .global-navigation__subnav.\--is-active {
      left: 0; }
  .global-navigation__item {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.5;
    -webkit-appearance: none;
    background-color: #ffffff;
    border-bottom: 1px solid #cfcfd4;
    border-bottom: 0.05556rem solid #cfcfd4;
    border-left: none;
    border-right: none;
    border-top: none;
    cursor: pointer;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    padding: 14px 19.999px;
    padding: 0.77778rem 1.11111rem;
    width: 100%; }
    .global-navigation__item.\--bg-gray {
      background-color: #f0f0f2; }
    .global-navigation__item:active .global-navigation__item:visited {
      color: #ffffff; }
    .global-navigation__item:focus {
      outline: none; }
    @media (min-width: 47.4375rem) {
      .global-navigation__item {
        min-width: 374.999px;
        min-width: 20.83333rem; } }
  .global-navigation__subnav-group {
    background-color: #ffffff;
    display: none;
    height: 100%; }
    .global-navigation__subnav-group.\--is-active {
      display: block; }
  .global-navigation__sub-item {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.92857;
    border-bottom: 0 solid transparent;
    border-top: 0 solid transparent;
    color: #ffffff;
    display: block;
    font-family: "Calibre-Regular", Arial, sans-serif;
    height: 60px;
    line-height: 60px;
    padding: 0 14.4px;
    padding: 0 0.8rem;
    text-decoration: none;
    text-transform: uppercase; }
    .global-navigation__sub-item:active .global-navigation__sub-item:visited {
      color: #ffffff; }
  .global-navigation__secondary-nav-item {
    padding: 14px;
    padding: 0.77778rem;
    height: 57.999px;
    height: 3.22222rem;
    align-items: center;
    border-left: 1px solid #cfcfd4;
    border-left: 0.05556rem solid #cfcfd4;
    display: inline-flex;
    transition: color 0.2s ease-in; }
    .global-navigation__secondary-nav-item:hover {
      color: #3139f2; }
  .global-navigation__search {
    height: 59.999px;
    height: 3.33333rem;
    width: 59.999px;
    width: 3.33333rem;
    position: absolute;
    right: 0;
    top: 0;
    z-index: 5; }
    .global-navigation__search.\--is-active .global-navigation__search-input-container {
      right: 73.999px;
      right: 4.11111rem;
      width: 284.999px;
      width: 15.83333rem; }
  .global-navigation__search-icon {
    height: 57px;
    height: 3.16667rem;
    width: 59.999px;
    width: 3.33333rem;
    padding: 19.999px;
    padding: 1.11111rem;
    background-color: #ffffff;
    border-left: 1px solid #cfcfd4;
    border-left: 0.05556rem solid #cfcfd4;
    color: #4d64ff;
    cursor: pointer;
    fill: #4d64ff;
    z-index: 10; }
  .global-navigation__search-input {
    font-size: 16px;
    font-size: 0.88889rem;
    line-height: 1.5;
    top: 14px;
    top: 0.77778rem;
    background-color: #ffffff;
    border: 1px solid #cfcfd4;
    border: 0.05556rem solid #cfcfd4;
    display: block;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    left: 0;
    overflow: hidden;
    padding: 4.5px 13.5px;
    padding: 0.25rem 0.75rem;
    position: absolute;
    width: 100%;
    z-index: 5; }
    .global-navigation__search-input:focus {
      border-bottom: 1px solid #a7a8af;
      border-bottom: 0.05556rem solid #a7a8af;
      outline: none; }
  .global-navigation__search-input-container {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.5;
    height: 57px;
    height: 3.16667rem;
    right: 7px;
    right: 0.38889rem;
    width: 284.999px;
    width: 15.83333rem;
    padding-left: 14px;
    padding-left: 0.77778rem;
    padding-right: 14px;
    padding-right: 0.77778rem;
    -webkit-backface-visibility: none;
            backface-visibility: none;
    background-color: #ffffff;
    display: block;
    margin: 0;
    position: absolute;
    top: 0;
    transition: right 0.3s ease-out, width 0.3s ease-in;
    width: 0;
    z-index: -5; }

/**
 * Footer component
 */
.footer {
  font-size: 14px;
  font-size: 0.77778rem;
  line-height: 1.92857;
  padding-bottom: 54px;
  padding-bottom: 3rem;
  background-color: #18243d;
  border-top: 10px solid #4d64ff;
  border-top: 0.55556rem solid #4d64ff;
  clear: left;
  color: #ffffff;
  float: left;
  font-family: "Calibre-Regular", Arial, sans-serif;
  width: 100%;
  /**
     * Footer link.
     *
     * Gives footer <li> padding, margin, and borders
     */
  /**
     * Footer disclaimer at bottom of footer.
     */ }
  .footer__border {
    border-bottom: 1px solid #6f707b;
    border-bottom: 0.05556rem solid #6f707b; }
  .footer__logo-container {
    margin-bottom: 19.999px;
    margin-bottom: 1.11111rem;
    padding-bottom: 19.999px;
    padding-bottom: 1.11111rem;
    padding-top: 19.999px;
    padding-top: 1.11111rem; }
  .footer__logo {
    height: 28.125px;
    height: 1.5625rem;
    width: 123.75px;
    width: 6.875rem; }
  .footer__logo-svg {
    color: #ffffff;
    fill: #ffffff;
    height: 28.125px;
    height: 1.5625rem;
    width: 123.75px;
    width: 6.875rem; }
  .footer__link {
    margin-bottom: 14px;
    margin-bottom: 0.77778rem;
    color: #ffffff;
    text-transform: uppercase; }
  .footer__copy {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.5; }
    .footer__copy.\--small {
      font-size: 14px;
      font-size: 0.77778rem;
      line-height: 1.25; }
  .footer__header {
    color: #ffffff; }
  .footer__disclaimer {
    margin-top: 14px;
    margin-top: 0.77778rem;
    padding-top: 14px;
    padding-top: 0.77778rem;
    border-top: 1px solid #6f707b;
    border-top: 0.05556rem solid #6f707b;
    color: #ffffff; }
  .footer__flex-cell {
    align-items: flex-end;
    display: flex;
    flex-direction: column;
    justify-content: space-between; }
  .footer__flex-container {
    align-items: center;
    display: flex;
    justify-content: space-between; }
  .footer a {
    color: #ffffff;
    text-decoration: none; }

.brcom-logo {
  padding-right: 14px;
  padding-right: 0.77778rem;
  padding-left: 14px;
  padding-left: 0.77778rem;
  border-bottom: 1.999px solid #4d64ff;
  border-bottom: 0.11111rem solid #4d64ff;
  display: inline-block;
  position: relative;
  text-align: left;
  width: auto;
  z-index: 5; }
  .brcom-logo__icon {
    height: 57.999px;
    height: 3.22222rem;
    width: 124.999px;
    width: 6.94444rem;
    color: #202020;
    fill: #202020; }

.hamburger {
  height: 59px;
  height: 3.27778rem;
  width: 59px;
  width: 3.27778rem;
  background: #ffffff;
  border: none;
  border-bottom: 1.999px solid #4d64ff;
  border-bottom: 0.11111rem solid #4d64ff;
  color: #202020;
  display: block;
  outline: none;
  padding: 9px;
  padding: 0.5rem;
  z-index: 3; }
  .hamburger.\--is-active .hamburger__bars {
    background: transparent; }
  .hamburger.\--is-active .hamburger__bars::before,
  .hamburger.\--is-active .hamburger__bars::after {
    top: 0;
    transition: top 0.1s, transform 0.1s 0.1s; }
  .hamburger.\--is-active .hamburger__bars::before {
    transform: rotate(45deg); }
  .hamburger.\--is-active .hamburger__bars::after {
    transform: rotate(-45deg); }
  .hamburger__bars, .hamburger__bars::before, .hamburger__bars::after {
    background: #202020;
    border-radius: 3px;
    display: block;
    height: 3.375px;
    height: 0.1875rem;
    margin: 0 auto;
    position: relative;
    transition: top 0.1s 0.1s, transform 0.1s, background 0s 0.1s;
    width: 27px;
    width: 1.5rem; }
  .hamburger__bars::before, .hamburger__bars::after {
    content: '';
    display: block;
    position: absolute; }
  .hamburger__bars::before {
    top: -9px;
    top: -0.5rem; }
  .hamburger__bars::after {
    top: 9px;
    top: 0.5rem; }
  .hamburger:focus {
    outline: 0; }

.author-card {
  font-family: "Calibre-Regular", Arial, sans-serif; }
  .author-card__content {
    padding-bottom: 27px;
    padding-bottom: 1.5rem;
    padding-top: 27px;
    padding-top: 1.5rem; }
  .author-card__image {
    border-left: 3px solid #4d64ff;
    border-left: 0.16667rem solid #4d64ff; }
  .author-card__header {
    font-family: "Calibre-Semibold", Arial, sans-serif; }
  .author-card__copy {
    font-size: 18px;
    font-size: 1rem;
    line-height: 1.3; }
  .author-card__twitter-handle {
    border-bottom: 1.999px solid #7ea9f2;
    border-bottom: 0.11111rem solid #7ea9f2;
    text-transform: lowercase; }
  .author-card__email {
    border-bottom: 1.999px solid #7ea9f2;
    border-bottom: 0.11111rem solid #7ea9f2;
    text-decoration: none;
    transition: border-bottom-color 0.2s ease-in-out; }
    .author-card__email, .author-card__email:active, .author-card__email:hover, .author-card__email:focus {
      color: #202020; }
    .author-card__email:hover {
      border-bottom-color: #3139f2; }

.tabs {
  border-bottom: 1px solid #a7a8af;
  border-bottom: 0.05556rem solid #a7a8af; }
  .tabs__cell {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.92857;
    padding: 12px;
    padding: 0.66667rem;
    background-color: #f0f0f2;
    border-right: 1px solid #a7a8af;
    border-right: 0.05556rem solid #a7a8af;
    color: #3f4148;
    cursor: pointer;
    font-family: "Calibre-Regular", Arial, sans-serif; }
    .tabs__cell.\--bg-white {
      background-color: #ffffff; }
      .tabs__cell.\--bg-white:hover {
        color: #3f4148;
        cursor: auto; }
    .tabs__cell.\--borderless {
      border-right: none; }
    .tabs__cell.\--is-active {
      padding-bottom: 10.999px;
      padding-bottom: 0.61111rem;
      background-color: #ffffff;
      border-bottom: 3px solid #3139f2;
      border-bottom: 0.16667rem solid #3139f2;
      color: #3139f2; }
    .tabs__cell.\--semibold {
      font-family: "Calibre-Semibold", Arial, sans-serif; }
    .tabs__cell.\--large-copy {
      font-size: 18px;
      font-size: 1rem;
      line-height: 1.5; }
    .tabs__cell.\--flex-between {
      display: flex;
      flex-direction: column;
      justify-content: space-between; }
    .tabs__cell.\--small {
      flex-grow: 1;
      padding: 12px 9px;
      padding: 0.66667rem 0.5rem; }
      .tabs__cell.\--small.\--is-active {
        padding-bottom: 5.999px;
        padding-bottom: 0.33333rem; }
    .tabs__cell a:hover a, .tabs__cell:hover a {
      color: #3139f2; }
  .tabs__cell-row {
    align-items: baseline;
    display: flex;
    justify-content: space-between; }
    .tabs__cell-row.\--align-center {
      align-items: center; }

.glossary__hero-copy {
  color: #ffffff; }

.glossary__alphabet-indicator {
  color: #4d64ff;
  font-family: "Calibre-Semibold", Arial, sans-serif; }

.glossary__term-list {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5;
  font-family: "Calibre-Semibold", Arial, sans-serif; }
  .glossary__term-list > li {
    margin-bottom: 7px;
    margin-bottom: 0.38889rem; }

.glossary__term {
  transition: color 250ms ease-in; }
  .glossary__term:hover {
    color: #3139f2; }

.glossary__breadcrumb {
  font-size: 14px;
  font-size: 0.77778rem;
  line-height: 1.92857;
  color: #3139f2;
  font-family: "Calibre-Regular", Arial, sans-serif;
  text-transform: none; }

.glossary__breadcrumb-caret {
  color: #3f4148;
  font-family: "Calibre-Semibold", Arial, sans-serif; }
  .glossary__breadcrumb-caret::before, .glossary__breadcrumb-caret::after {
    content: '\00a0'; }

.glossary__breadcrumb-term {
  color: #6f707b; }

.glossary__other-terms-headline {
  position: relative;
  transition: color 250ms ease-in; }
  .glossary__other-terms-headline:hover {
    color: #3139f2; }
  .glossary__other-terms-headline::after {
    content: url("../svg/action-arrow-blue.svg");
    display: inline-block;
    opacity: 1;
    position: absolute;
    right: 0;
    transition: width 250ms ease-in; }

.glossary__other-terms-copy {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5;
  font-family: "Calibre-Regular", Arial, sans-serif; }

/**
 * Sizing utilities
 */
/* Proportional widths
   ========================================================================== */
/**
 * Specify the proportional width of an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
 *
 * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
 *    http://git.io/vllMD
 */
.size-1of12 {
  flex-basis: auto !important;
  width: 8.33333% !important; }

.size-1of10 {
  flex-basis: auto !important;
  width: 10% !important; }

.size-1of8 {
  flex-basis: auto !important;
  width: 12.5% !important; }

.size-1of6,
.size-2of12 {
  flex-basis: auto !important;
  width: 16.66667% !important; }

.size-1of5,
.size-2of10 {
  flex-basis: auto !important;
  width: 20% !important; }

.size-1of4,
.size-2of8,
.size-3of12 {
  flex-basis: auto !important;
  width: 25% !important; }

.size-3of10 {
  flex-basis: auto !important;
  width: 30% !important; }

.size-1of3,
.size-2of6,
.size-4of12 {
  flex-basis: auto !important;
  width: 33.33333% !important; }

.size-3of8 {
  flex-basis: auto !important;
  width: 37.5% !important; }

.u-size2of5,
.u-size4of10 {
  flex-basis: auto !important;
  width: 40% !important; }

.size-5of12 {
  flex-basis: auto !important;
  width: 41.66667% !important; }

.size-1of2,
.size-2of4,
.size-3of6,
.size-4of8,
.size-5of10,
.size-6of12 {
  flex-basis: auto !important;
  width: 50% !important; }

.size-7of12 {
  flex-basis: auto !important;
  width: 58.33333% !important; }

.size-3of5,
.size-6of10 {
  flex-basis: auto !important;
  width: 60% !important; }

.size-5of8 {
  flex-basis: auto !important;
  width: 62.5% !important; }

.size-2of3,
.size-4of6,
.size-8of12 {
  flex-basis: auto !important;
  width: 66.66667% !important; }

.size-7of10 {
  flex-basis: auto !important;
  width: 70% !important; }

.size-3of4,
.size-6of8,
.size-9of12 {
  flex-basis: auto !important;
  width: 75% !important; }

.size-4of5,
.size-8of10 {
  flex-basis: auto !important;
  width: 80% !important; }

.size-5of6,
.size-10of12 {
  flex-basis: auto !important;
  width: 83.33333% !important; }

.size-7of8 {
  flex-basis: auto !important;
  width: 87.5% !important; }

.size-9of10 {
  flex-basis: auto !important;
  width: 90% !important; }

.size-11of12 {
  flex-basis: auto !important;
  width: 91.66667% !important; }

/* Intrinsic widths
   ========================================================================== */
/**
 * Make an element shrink wrap its content.
 */
.size-fit {
  flex-basis: auto !important; }

/**
 * Make an element fill the remaining space.
 *
 * 1. Be explicit to work around IE10 bug with shorthand flex
 *    http://git.io/vllC7
 * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
 *    http://git.io/vllMt
 */
.size-fill {
  flex: 1 1 0% !important;
  /* 1 */
  flex-basis: 0% !important;
  /* 2 */ }

/**
 * An alternative method to make an element fill the remaining space.
 * Distributes space based on the initial width and height of the element
 *
 * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
 */
.size-fill-alt {
  flex: 1 1 auto !important;
  flex-basis: auto !important; }

/**
 * Make an element the width of its parent.
 */
.size-full,
.size-large {
  box-sizing: border-box !important;
  display: block !important;
  width: 100% !important;
  height: auto; }

/**
 * Size: breakpoint 1 (extra-small)
 */
@media (min-width: 39.9375rem) {
  /* Proportional widths: breakpoint 1 (small)
       ======================================================================== */
  /**
     * Specify the proportional width of an object.
     * Intentional redundancy build into each set of unit classes.
     * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
     *
     * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
     *    http://git.io/vllMD
     */
  .size-1of12--xs {
    flex-basis: auto !important;
    width: 8.33333% !important; }
  .size-1of10--xs {
    flex-basis: auto !important;
    width: 10% !important; }
  .size-1of8--xs {
    flex-basis: auto !important;
    width: 12.5% !important; }
  .size-1of6--xs,
  .size-2of12--xs {
    flex-basis: auto !important;
    width: 16.66667% !important; }
  .size-1of5--xs,
  .size-2of10--xs {
    flex-basis: auto !important;
    width: 20% !important; }
  .size-1of4--xs,
  .size-2of8--xs,
  .size-3of12--xs {
    flex-basis: auto !important;
    width: 25% !important; }
  .size-3of10--xs {
    flex-basis: auto !important;
    width: 30% !important; }
  .size-1of3--xs,
  .size-2of6--xs,
  .size-4of12--xs {
    flex-basis: auto !important;
    width: 33.33333% !important; }
  .size-3of8--xs {
    flex-basis: auto !important;
    width: 37.5% !important; }
  .size-2of5--xs,
  .size-4of10--xs {
    flex-basis: auto !important;
    width: 40% !important; }
  .size-5of12--xs {
    flex-basis: auto !important;
    width: 41.66667% !important; }
  .size-1of2--xs,
  .size-2of4--xs,
  .size-3of6--xs,
  .size-4of8--xs,
  .size-5of10--xs,
  .size-6of12--xs {
    flex-basis: auto !important;
    width: 50% !important; }
  .size-7of12--xs {
    flex-basis: auto !important;
    width: 58.33333% !important; }
  .size-3of5--xs,
  .size-6of10--xs {
    flex-basis: auto !important;
    width: 60% !important; }
  .size-5of8--xs {
    flex-basis: auto !important;
    width: 62.5% !important; }
  .size-2of3--xs,
  .size-4of6--xs,
  .size-8of12--xs {
    flex-basis: auto !important;
    width: 66.66667% !important; }
  .size-7of10--xs {
    flex-basis: auto !important;
    width: 70% !important; }
  .size-3of4--xs,
  .size-6of8--xs,
  .size-9of12--xs {
    flex-basis: auto !important;
    width: 75% !important; }
  .size-4of5--xs,
  .size-8of10--xs {
    flex-basis: auto !important;
    width: 80% !important; }
  .size-5of6--xs,
  .size-10of12--xs {
    flex-basis: auto !important;
    width: 83.33333% !important; }
  .size-7of8--xs {
    flex-basis: auto !important;
    width: 87.5% !important; }
  .size-9of10--xs {
    flex-basis: auto !important;
    width: 90% !important; }
  .size-11of12--xs {
    flex-basis: auto !important;
    width: 91.66667% !important; }
  /* Intrinsic widths
       ======================================================================== */
  /**
     * Make an element shrink wrap its content.
     */
  .size-fit--xs {
    flex-basis: auto !important; }
  /**
     * Make an element fill the remaining space.
     *
     * 1. Be explicit to work around IE10 bug with shorthand flex
     *    http://git.io/vllC7
     * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
     *    http://git.io/vllMt
     */
  .size-fill--xs {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }
  /**
     * An alternative method to make an element fill the remaining space.
     * Distributes space based on the initial width and height of the element
     *
     * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
     */
  .size-fill-alt--xs {
    flex: 1 1 auto !important;
    flex-basis: auto !important; }
  /**
     * Make an element the width of its parent.
     */
  .size-full--xs {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; } }

/**
 * Size: breakpoint 1 (small)
 */
@media (min-width: 47.4375rem) {
  /* Proportional widths: breakpoint 2 (small)
       ======================================================================== */
  /**
     * Specify the proportional width of an object.
     * Intentional redundancy build into each set of unit classes.
     * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
     *
     * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
     *    http://git.io/vllMD
     */
  .size-1of12--sm {
    flex-basis: auto !important;
    width: 8.33333% !important; }
  .size-1of10--sm {
    flex-basis: auto !important;
    width: 10% !important; }
  .size-1of8--sm {
    flex-basis: auto !important;
    width: 12.5% !important; }
  .size-1of6--sm,
  .size-2of12--sm {
    flex-basis: auto !important;
    width: 16.66667% !important; }
  .size-1of5--sm,
  .size-2of10--sm {
    flex-basis: auto !important;
    width: 20% !important; }
  .size-1of4--sm,
  .size-2of8--sm,
  .size-3of12--sm {
    flex-basis: auto !important;
    width: 25% !important; }
  .size-3of10--sm {
    flex-basis: auto !important;
    width: 30% !important; }
  .size-1of3--sm,
  .size-2of6--sm,
  .size-4of12--sm {
    flex-basis: auto !important;
    width: 33.33333% !important; }
  .size-3of8--sm {
    flex-basis: auto !important;
    width: 37.5% !important; }
  .size-2of5--sm,
  .size-4of10--sm {
    flex-basis: auto !important;
    width: 40% !important; }
  .size-5of12--sm {
    flex-basis: auto !important;
    width: 41.66667% !important; }
  .size-1of2--sm,
  .size-2of4--sm,
  .size-3of6--sm,
  .size-4of8--sm,
  .size-5of10--sm,
  .size-6of12--sm {
    flex-basis: auto !important;
    width: 50% !important; }
  .size-7of12--sm {
    flex-basis: auto !important;
    width: 58.33333% !important; }
  .size-3of5--sm,
  .size-6of10--sm {
    flex-basis: auto !important;
    width: 60% !important; }
  .size-5of8--sm {
    flex-basis: auto !important;
    width: 62.5% !important; }
  .size-2of3--sm,
  .size-4of6--sm,
  .size-8of12--sm {
    flex-basis: auto !important;
    width: 66.66667% !important; }
  .size-7of10--sm {
    flex-basis: auto !important;
    width: 70% !important; }
  .size-3of4--sm,
  .size-6of8--sm,
  .size-9of12--sm {
    flex-basis: auto !important;
    width: 75% !important; }
  .size-4of5--sm,
  .size-8of10--sm {
    flex-basis: auto !important;
    width: 80% !important; }
  .size-5of6--sm,
  .size-10of12--sm {
    flex-basis: auto !important;
    width: 83.33333% !important; }
  .size-7of8--sm {
    flex-basis: auto !important;
    width: 87.5% !important; }
  .size-9of10--sm {
    flex-basis: auto !important;
    width: 90% !important; }
  .size-11of12--sm {
    flex-basis: auto !important;
    width: 91.66667% !important; }
  /* Intrinsic widths
       ======================================================================== */
  /**
     * Make an element shrink wrap its content.
     */
  .size-fit--sm {
    flex-basis: auto !important; }
  /**
     * Make an element fill the remaining space.
     *
     * 1. Be explicit to work around IE10 bug with shorthand flex
     *    http://git.io/vllC7
     * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
     *    http://git.io/vllMt
     */
  .size-fill--sm {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }
  /**
     * An alternative method to make an element fill the remaining space.
     * Distributes space based on the initial width and height of the element
     *
     * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
     */
  .size-fill-alt--sm {
    flex: 1 1 auto !important;
    flex-basis: auto !important; }
  /**
     * Make an element the width of its parent.
     */
  .size-full--sm {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; } }

/**
 * Size: breakpoint 2 (medium)
 */
@media (min-width: 63.6875rem) {
  /* Proportional widths: breakpoint 3 (medium)
       ======================================================================== */
  /**
     * Specify the proportional width of an object.
     * Intentional redundancy build into each set of unit classes.
     * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
     *
     * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
     *    http://git.io/vllMD
     */
  .size-1of12--md {
    flex-basis: auto !important;
    width: 8.33333% !important; }
  .size-1of10--md {
    flex-basis: auto !important;
    width: 10% !important; }
  .size-1of8--md {
    flex-basis: auto !important;
    width: 12.5% !important; }
  .size-1of6--md,
  .size-2of12--md {
    flex-basis: auto !important;
    width: 16.66667% !important; }
  .size-1of5--md,
  .size-2of10--md {
    flex-basis: auto !important;
    width: 20% !important; }
  .size-1of4--md,
  .size-2of8--md,
  .size-3of12--md {
    flex-basis: auto !important;
    width: 25% !important; }
  .size-3of10--md {
    flex-basis: auto !important;
    width: 30% !important; }
  .size-1of3--md,
  .size-2of6--md,
  .size-4of12--md {
    flex-basis: auto !important;
    width: 33.33333% !important; }
  .size-3of8--md {
    flex-basis: auto !important;
    width: 37.5% !important; }
  .size-2of5--md,
  .size-4of10--md {
    flex-basis: auto !important;
    width: 40% !important; }
  .size-5of12--md {
    flex-basis: auto !important;
    width: 41.66667% !important; }
  .size-1of2--md,
  .size-2of4--md,
  .size-3of6--md,
  .size-4of8--md,
  .size-5of10--md,
  .size-6of12--md {
    flex-basis: auto !important;
    width: 50% !important; }
  .size-7of12--md {
    flex-basis: auto !important;
    width: 58.33333% !important; }
  .size-3of5--md,
  .size-6of10--md {
    flex-basis: auto !important;
    width: 60% !important; }
  .size-5of8--md {
    flex-basis: auto !important;
    width: 62.5% !important; }
  .size-2of3--md,
  .size-4of6--md,
  .size-8of12--md {
    flex-basis: auto !important;
    width: 66.66667% !important; }
  .size-7of10--md {
    flex-basis: auto !important;
    width: 70% !important; }
  .size-3of4--md,
  .size-6of8--md,
  .size-9of12--md {
    flex-basis: auto !important;
    width: 75% !important; }
  .size-4of5--md,
  .size-8of10--md {
    flex-basis: auto !important;
    width: 80% !important; }
  .size-5of6--md,
  .size-10of12--md {
    flex-basis: auto !important;
    width: 83.33333% !important; }
  .size-7of8--md {
    flex-basis: auto !important;
    width: 87.5% !important; }
  .size-9of10--md {
    flex-basis: auto !important;
    width: 90% !important; }
  .size-11of12--md {
    flex-basis: auto !important;
    width: 91.66667% !important; }
  /* Intrinsic widths
       ======================================================================== */
  /**
     * Make an element shrink wrap its content.
     */
  .size-fit--md {
    flex-basis: auto !important; }
  /**
     * Make an element fill the remaining space.
     *
     * 1. Be explicit to work around IE10 bug with shorthand flex
     *    http://git.io/vllC7
     * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
     *    http://git.io/vllMt
     */
  .size-fill--md {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }
  /**
     * An alternative method to make an element fill the remaining space.
     * Distributes space based on the initial width and height of the element
     *
     * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
     */
  .size-fill-alt--md {
    flex: 1 1 auto !important;
    flex-basis: auto !important; }
  /**
     * Make an element the width of its parent.
     */
  .size-full--md {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; } }

/**
 * Size: breakpoint 3 (large)
 */
@media (min-width: 77.4375rem) {
  /* Proportional widths: breakpoint 4 (large)
       ======================================================================== */
  /**
     * Specify the proportional width of an object.
     * Intentional redundancy build into each set of unit classes.
     * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
     *
     * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
     *    http://git.io/vllMD
     */
  .size-1of12--lg {
    flex-basis: auto !important;
    width: 8.33333% !important; }
  .size-1of10--lg {
    flex-basis: auto !important;
    width: 10% !important; }
  .size-1of8--lg {
    flex-basis: auto !important;
    width: 12.5% !important; }
  .size-1of6--lg,
  .size-2of12--lg {
    flex-basis: auto !important;
    width: 16.66667% !important; }
  .size-1of5--lg,
  .size-2of10--lg {
    flex-basis: auto !important;
    width: 20% !important; }
  .size-1of4--lg,
  .size-2of8--lg,
  .size-3of12--lg {
    flex-basis: auto !important;
    width: 25% !important; }
  .size-3of10--lg {
    flex-basis: auto !important;
    width: 30% !important; }
  .size-1of3--lg,
  .size-2of6--lg,
  .size-4of12--lg {
    flex-basis: auto !important;
    width: 33.33333% !important; }
  .size-3of8--lg {
    flex-basis: auto !important;
    width: 37.5% !important; }
  .size-2of5--lg,
  .size-4of10--lg {
    flex-basis: auto !important;
    width: 40% !important; }
  .size-5of12--lg {
    flex-basis: auto !important;
    width: 41.66667% !important; }
  .size-1of2--lg,
  .size-2of4--lg,
  .size-3of6--lg,
  .size-4of8--lg,
  .size-5of10--lg,
  .size-6of12--lg {
    flex-basis: auto !important;
    width: 50% !important; }
  .size-7of12--lg {
    flex-basis: auto !important;
    width: 58.33333% !important; }
  .size-3of5--lg,
  .size-6of10--lg {
    flex-basis: auto !important;
    width: 60% !important; }
  .size-5of8--lg {
    flex-basis: auto !important;
    width: 62.5% !important; }
  .size-2of3--lg,
  .size-4of6--lg,
  .size-8of12--lg {
    flex-basis: auto !important;
    width: 66.66667% !important; }
  .size-7of10--lg {
    flex-basis: auto !important;
    width: 70% !important; }
  .size-3of4--lg,
  .size-6of8--lg,
  .size-9of12--lg {
    flex-basis: auto !important;
    width: 75% !important; }
  .size-4of5--lg,
  .size-8of10--lg {
    flex-basis: auto !important;
    width: 80% !important; }
  .size-5of6--lg,
  .size-10of12--lg {
    flex-basis: auto !important;
    width: 83.33333% !important; }
  .size-7of8--lg {
    flex-basis: auto !important;
    width: 87.5% !important; }
  .size-9of10--lg {
    flex-basis: auto !important;
    width: 90% !important; }
  .size-11of12--lg {
    flex-basis: auto !important;
    width: 91.66667% !important; }
  /* Intrinsic widths
       ======================================================================== */
  /**
     * Make an element shrink wrap its content.
     */
  .size-fit--lg {
    flex-basis: auto !important; }
  /**
     * Make an element fill the remaining space.
     *
     * 1. Be explicit to work around IE10 bug with shorthand flex
     *    http://git.io/vllC7
     * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
     *    http://git.io/vllMt
     */
  .size-fill--lg {
    flex: 1 1 0% !important;
    /* 1 */
    flex-basis: 0% !important;
    /* 2 */ }
  /**
     * An alternative method to make an element fill the remaining space.
     * Distributes space based on the initial width and height of the element
     *
     * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
     */
  .size-fill-alt--lg {
    flex: 1 1 auto !important;
    flex-basis: auto !important; }
  /**
     * Make an element the width of its parent.
     */
  .size-full--lg {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; } }

/**
 * Clearfix
 *
 * Clearfix tweak/utility class utilitizing our clearfix mixin
 */
#csstyle .\+clearfix::after {
  clear: both !important;
  content: "" !important;
  display: block !important; }

/**
 * Headings
 *
 * Used for semantically overriding h* tag font sizes
 *
 * Style and <h1> tag to look like an <h3> tag
 *
 * <h1 class="heading-gamma"></h1>
 */
/**
 * Syntax for heading tweaks
 *
 * +heading-{alpha|beta|gamma|delta|epsilon|zeta}
 *
 * Ex.
 * +heading-alpha
 */
#csstyle .\+heading-alpha {
  font-size: 72px;
  font-size: 4rem;
  line-height: 1.125; }

#csstyle .\+heading-beta {
  font-size: 52px;
  font-size: 2.88889rem;
  line-height: 1.03846; }

#csstyle .\+heading-gamma {
  font-size: 36px;
  font-size: 2rem;
  line-height: 1.5; }

#csstyle .\+heading-delta {
  font-size: 28px;
  font-size: 1.55556rem;
  line-height: 1.92857; }

#csstyle .\+heading-epsilon {
  font-size: 23.999px;
  font-size: 1.33333rem;
  line-height: 1.125; }

#csstyle .\+heading-zeta {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5; }

#csstyle .\+mg-none {
  margin: 0; }

#csstyle .\+mg-top-none {
  margin-top: 0; }

#csstyle .\+mg-bottom-none {
  margin-bottom: 0; }

#csstyle .\+mg-top-none {
  margin-top: 0; }

#csstyle .\+mg-xs {
  margin: 14px;
  margin: 0.77778rem; }

#csstyle .\+mg-top-xxs {
  margin-top: 7px;
  margin-top: 0.38889rem; }

#csstyle .\+mg-top-xs {
  margin-top: 14px;
  margin-top: 0.77778rem; }

#csstyle .\+mg-top-sm {
  margin-top: 19.999px;
  margin-top: 1.11111rem; }

#csstyle .\+mg-top-md {
  margin-top: 34px;
  margin-top: 1.88889rem; }

#csstyle .\+mg-top-lg {
  margin-top: 41px;
  margin-top: 2.27778rem; }

#csstyle .\+mg-top {
  margin-top: 27px;
  margin-top: 1.5rem; }

#csstyle .\+mg-bottom {
  margin-bottom: 27px;
  margin-bottom: 1.5rem; }

#csstyle .\+mg-bottom-md {
  margin-bottom: 34px;
  margin-bottom: 1.88889rem; }

#csstyle .\+mg-bottom-sm {
  margin-bottom: 19.999px;
  margin-bottom: 1.11111rem; }

#csstyle .\+mg-bottom-xs {
  margin-bottom: 14px;
  margin-bottom: 0.77778rem; }

#csstyle .\+mg-bottom-xxs {
  margin-bottom: 7px;
  margin-bottom: 0.38889rem; }

#csstyle .\+mg-left-xs {
  margin-left: 14px;
  margin-left: 0.77778rem; }

#csstyle .\+mg-left-xxs {
  margin-left: 7px;
  margin-left: 0.38889rem; }

#csstyle .\+mg-left-sm {
  margin-left: 19.999px;
  margin-left: 1.11111rem; }

#csstyle .\+mg-left {
  margin-left: 27px;
  margin-left: 1.5rem; }

#csstyle .\+mg-left-xl {
  margin-left: 54px;
  margin-left: 3rem; }

#csstyle .\+mg-right-sm {
  margin-right: 19.999px;
  margin-right: 1.11111rem; }

#csstyle .\+mg-right-xs {
  margin-right: 14px;
  margin-right: 0.77778rem; }

#csstyle .\+pd-none {
  padding: 0; }

#csstyle .\+pd-top-none {
  padding-top: 0; }

#csstyle .\+pd-bottom-none {
  padding-bottom: 0; }

#csstyle .\+pd-xs {
  padding: 14px;
  padding: 0.77778rem; }

#csstyle .\+pd-sm {
  padding: 19.999px;
  padding: 1.11111rem; }

#csstyle .\+pd-md {
  padding: 34px;
  padding: 1.88889rem; }

#csstyle .\+pd-top-sm {
  padding-top: 19.999px;
  padding-top: 1.11111rem; }

#csstyle .\+pd-bottom-sm {
  padding-bottom: 19.999px;
  padding-bottom: 1.11111rem; }

#csstyle .\+pd-top-md {
  padding-top: 34px;
  padding-top: 1.88889rem; }

#csstyle .\+pd-top-xs {
  padding-top: 14px;
  padding-top: 0.77778rem; }

#csstyle .\+pd-top-xxs {
  padding-top: 7px;
  padding-top: 0.38889rem; }

#csstyle .\+pd-top {
  padding-top: 27px;
  padding-top: 1.5rem; }

#csstyle .\+pd-bottom-xs {
  padding-bottom: 14px;
  padding-bottom: 0.77778rem; }

#csstyle .\+pd-bottom-xxs {
  padding-bottom: 7px;
  padding-bottom: 0.38889rem; }

#csstyle .\+pd-bottom-md {
  padding-bottom: 34px;
  padding-bottom: 1.88889rem; }

#csstyle .\+pd-bottom {
  padding-bottom: 27px;
  padding-bottom: 1.5rem; }

#csstyle .\+pd-left-xl {
  padding-left: 54px;
  padding-left: 3rem; }

#csstyle .\+pd-left {
  padding-left: 27px;
  padding-left: 1.5rem; }

#csstyle .\+pd-left-md {
  padding-left: 34px;
  padding-left: 1.88889rem; }

#csstyle .\+pd-left-sm {
  padding-left: 19.999px;
  padding-left: 1.11111rem; }

#csstyle .\+pd-left-xs {
  padding-left: 14px;
  padding-left: 0.77778rem; }

#csstyle .\+pd-left-xxs {
  padding-left: 7px;
  padding-left: 0.38889rem; }

#csstyle .\+pd-right-md {
  padding-right: 34px;
  padding-right: 1.88889rem; }

#csstyle .\+pd-right-sm {
  padding-right: 19.999px;
  padding-right: 1.11111rem; }

#csstyle .\+pd-right-xs {
  padding-right: 14px;
  padding-right: 0.77778rem; }

#csstyle .\+pd-right-xxs {
  padding-right: 7px;
  padding-right: 0.38889rem; }

/**
 * Display
 *
 * Used for displaying/hiding elements at different breakpoints
 */
/**
 * syntax for display classes:
 *
 * .display-(type)--(breakpoint)
 *
 * .display-{none|block|inline-block|inline|flex|}--{sm|md|lg}
 *
 * Ex.
 * .display-none {}
 * .display-flex--sm {}
 * .display-inline-block {}
 */
#csstyle .\+display-none {
  display: none; }

#csstyle .\+display-block {
  display: block; }

#csstyle .\+display-inline {
  display: inline; }

#csstyle .\+display-inline-block {
  display: inline-block; }

#csstyle .\+display-inline-flex {
  display: inline-flex; }

#csstyle .\+display-flex {
  display: flex; }

@media (min-width: 39.9375rem) {
  #csstyle .\+display-none--xs {
    display: none; }
  #csstyle .\+display-block--xs {
    display: block; }
  #csstyle .\+display-inline--xs {
    display: inline; }
  #csstyle .\+display-inline-block--xs {
    display: inline-block; }
  #csstyle .\+display-inline-flex--xs {
    display: inline-flex; }
  #csstyle .\+display-flex--xs {
    display: flex; } }

@media (min-width: 47.4375rem) {
  #csstyle .\+display-none--sm {
    display: none; }
  #csstyle .\+display-block--sm {
    display: block; }
  #csstyle .\+display-inline--sm {
    display: inline; }
  #csstyle .\+display-inline-block--sm {
    display: inline-block; }
  #csstyle .\+display-inline-flex--sm {
    display: inline-flex; }
  #csstyle .\+display-flex--sm {
    display: flex; } }

@media (min-width: 63.6875rem) {
  #csstyle .\+display-none--md {
    display: none; }
  #csstyle .\+display-block--md {
    display: block; }
  #csstyle .\+display-inline--md {
    display: inline; }
  #csstyle .\+display-inline-block--md {
    display: inline-block; }
  #csstyle .\+display-inline-flex--md {
    display: inline-flex; }
  #csstyle .\+display-flex--md {
    display: flex; } }

@media (min-width: 77.4375rem) {
  #csstyle .\+display-none--lg {
    display: none; }
  #csstyle .\+display-block--lg {
    display: block; }
  #csstyle .\+display-inline--lg {
    display: inline; }
  #csstyle .\+display-inline-block--lg {
    display: inline-block; }
  #csstyle .\+display-inline-flex--lg {
    display: inline-flex; }
  #csstyle .\+display-flex--lg {
    display: flex; } }

.\--off {
  display: none; }

#csstyle .\+overflow-hidden {
  overflow: hidden; }

#csstyle .\+border {
  border: 1px solid #cfcfd4;
  border: 0.05556rem solid #cfcfd4; }

#csstyle .\+border-top {
  border-top: 1px solid #cfcfd4;
  border-top: 0.05556rem solid #cfcfd4; }

#csstyle .\+border-bottom {
  border-bottom: 1px solid #cfcfd4;
  border-bottom: 0.05556rem solid #cfcfd4; }

#csstyle .\+border-left {
  border-left: 1px solid #cfcfd4;
  border-left: 0.05556rem solid #cfcfd4; }

#csstyle .\+border-midnight {
  border-color: #18243d; }

#csstyle .\+border-blue-lighter {
  border-color: #7ea9f2; }

#csstyle .\+border-blue {
  border-color: #3139f2; }

#csstyle .\+border-right {
  border-right: 1px solid #cfcfd4;
  border-right: 0.05556rem solid #cfcfd4; }

#csstyle .\+border-top {
  border-top: 1px solid #cfcfd4;
  border-top: 0.05556rem solid #cfcfd4; }

#csstyle .\+clear-border {
  border: none; }

#csstyle .\+text-left {
  text-align: left; }

#csstyle .\+text-center {
  text-align: center; }

#csstyle .\+text-right {
  text-align: right; }

#csstyle .\+float-right {
  float: right; }

#csstyle .\+float-left {
  float: left; }

#csstyle .\+float-none {
  float: none; }

/**
 * syntax for position classes:
 *
 * .pos-(type)
 *
 * .pos-{absolute|fixed|relative|static}
 *
 * Ex.
 * .pos-absolute {}
 */
#csstyle .\+pos-absolute {
  position: absolute; }

#csstyle .\+pos-fixed {
  position: fixed; }

#csstyle .\+pos-relative {
  position: relative; }

#csstyle .\+pos-static {
  position: static; }

.sticky {
  position: -webkit-sticky;
  position: sticky;
  top: 0; }

.sticky:before,
.sticky:after {
  content: '';
  display: table; }

#csstyle .\+center-content {
  margin-left: auto;
  margin-right: auto; }

/*
* Legacy style support for migrated content
*
* map legacy styles to new format
* TODO: phase these classes out of content
*
*/
/* Remove space between slideshow top bar and br tag */
.pagination__header.media.\--reverse + br {
  display: none; }

/*Disable align=left on legacy pages*/
img[align=left] + [data-slide-controls] {
  clear: both; }

.pagination__header + div + .copyright {
  margin-top: 4.5px;
  margin-top: 0.25rem; }

.pagination__header + div + p:not(.copyright) {
  margin-top: 13.5px;
  margin-top: 0.75rem; }

[data-video-player="true"] + [data-slide-controls] {
  margin-bottom: 19.999px;
  margin-bottom: 1.11111rem; }

.definition-box {
  background: #f0f0f2;
  padding: 20px 20px 10px;
  margin-bottom: 15px; }

.boxcenter, .boxchecklist, .BoxBlue {
  padding: 27px;
  padding: 1.5rem;
  background-color: #f0f0f2;
  color: #202020;
  font-family: "Calibre-Regular", Arial, sans-serif;
  font-size: 18px;
  line-height: 27px;
  margin: 0 0 10px 0; }
  .boxcenter li, .boxchecklist li, .BoxBlue li {
    padding-top: 10px; }

.boxcontent > p {
  padding: 0; }

.sidebysidelist {
  overflow: auto; }
  .sidebysidelist > ul, .sidebysidelist ol {
    float: left;
    width: 45%; }
    @media (max-width: 39.9375rem) {
      .sidebysidelist > ul, .sidebysidelist ol {
        margin-bottom: 0;
        width: auto; } }
  .sidebysidelist > li {
    padding-left: 27px;
    padding-left: 1.5rem; }

.source {
  font-size: 14px;
  font-size: 0.77778rem;
  line-height: 1.5;
  letter-spacing: 0.3px;
  letter-spacing: 0.01667rem;
  margin-bottom: 34px;
  margin-bottom: 1.88889rem;
  color: #6f707b;
  font-family: "Calibre-Regular", Arial, sans-serif;
  margin-top: -13.5px;
  margin-top: -0.75rem; }

.highlightMedBlue, .fcDarkBlue, .fB {
  font-weight: bolder;
  color: #202020; }

.interactive-hed {
  font-size: 28px;
  font-size: 1.55556rem;
  line-height: 1.5;
  margin-bottom: 7px;
  margin-bottom: 0.38889rem;
  font-family: "acumin-pro-extra-condensed", Arial, sans-serif; }

.imgRight {
  float: right;
  margin-bottom: 10px;
  margin-left: 10px;
  max-width: 320px; }

.imgLeft {
  float: left;
  margin-bottom: 10px;
  margin-right: 10px; }

.cta-button {
  font-size: 16px;
  font-size: 0.88889rem;
  line-height: 1.6875;
  letter-spacing: 1px;
  letter-spacing: 0.05556rem;
  background-color: #20cb7e;
  color: #ffffff;
  float: none;
  font-family: "Calibre-Regular", Arial, sans-serif;
  margin: 0 auto 18px;
  padding: 0;
  text-align: center;
  max-width: 80%; }
  @media (max-width: 39.9375rem) {
    .cta-button {
      width: 100%;
      max-width: 100%; } }
  .cta-button a {
    color: #ffffff;
    text-decoration: none;
    border-bottom: none;
    display: block;
    padding: 12px 10px;
    transition: opacity 0.15s ease-in-out, background-color 0.2s ease-in-out;
    text-transform: uppercase; }
    .cta-button a:hover, .cta-button a:focus, .cta-button a:active {
      background-color: #202020;
      color: #ffffff; }
    .cta-button a > span {
      margin-left: 5px; }
  .cta-button > span, .cta-button br {
    display: none; }

.cta-wide-button {
  background: #20cb7e;
  width: 450px;
  float: none;
  margin: 0 auto 15px;
  padding: 0;
  text-align: center; }
  .cta-wide-button span {
    float: right; }
    .cta-wide-button span:after {
      margin: 2px 20px 0 0; }

.cta-green, .cta-credit-card-button, .cta-car-loans-button {
  background-color: #20cb7e;
  color: #202020; }

.pullquoteWide, .pullquote1, .pullquoteRight {
  font-size: 36px;
  font-size: 2rem;
  line-height: 1.25;
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
  margin-top: 27px;
  margin-top: 1.5rem;
  padding-top: 14px;
  padding-top: 0.77778rem;
  padding-right: 41px;
  padding-right: 2.27778rem;
  padding-bottom: 14px;
  padding-bottom: 0.77778rem;
  padding-left: 41px;
  padding-left: 2.27778rem;
  font-family: "acumin-pro-extra-condensed", Arial, sans-serif;
  position: relative;
  text-transform: uppercase; }
  .pullquoteWide::before, .pullquote1::before, .pullquoteRight::before {
    content: url("../svg/quote-left-charcoal.svg");
    left: 0;
    position: absolute;
    top: 0; }
  .pullquoteWide::after, .pullquote1::after, .pullquoteRight::after {
    margin-left: 19.999px;
    margin-left: 1.11111rem;
    bottom: 0;
    content: url("../svg/quote-right-charcoal.svg");
    position: absolute; }

.keypoints {
  padding-top: 27px;
  padding-top: 1.5rem;
  padding-bottom: 27px;
  padding-bottom: 1.5rem;
  padding-left: 27px;
  padding-left: 1.5rem;
  border-left: 3.999px solid #e9e9ec;
  border-left: 0.22222rem solid #e9e9ec; }
  .keypoints ul {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.92857;
    margin-bottom: 0; }
  .keypoints li {
    margin-bottom: 7px;
    margin-bottom: 0.38889rem; }
    .keypoints li:last-of-type {
      margin-bottom: 0; }
  .keypoints h6 {
    font-size: 28px;
    font-size: 1.55556rem;
    line-height: 1.5;
    margin-bottom: 7px;
    margin-bottom: 0.38889rem;
    font-family: "acumin-pro-extra-condensed", Arial, sans-serif; }

@media (max-width: 39.9375rem) {
  img[align="left"] {
    float: none;
    width: 100%; } }

img[width="260"], img[width="256"] {
  margin-right: 40px;
  margin-bottom: 20px; }
  @media (max-width: 39.9375rem) {
    img[width="260"], img[width="256"] {
      float: none;
      height: auto;
      margin: 0;
      width: 100%; } }

img[src*="gallery_gallery-down-arrow"], img[src*="gallery_gallery-up-arrow"] {
  height: 78px;
  margin-top: 15px;
  width: 73px; }

iframe {
  border: 0; }

iframe[src*="player.cnbc.com"], iframe[src*="youtube.com"] {
  width: 100%; }

iframe[src*="today.com"] {
  height: 460px;
  width: 100%; }
  @media (max-width: 39.9375rem) {
    iframe[src*="today.com"] {
      height: 350px; } }

.framed_img {
  width: 320px; }
  @media (max-width: 39.9375rem) {
    .framed_img {
      max-width: 100%;
      width: 100%; } }

.exptbl, .exptbl2, .exptbl3, .table-vertical, .exptbl-rates {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5;
  font-family: "Calibre-Regular", Arial, sans-serif; }
  @media (max-width: 39.9375rem) {
    .exptbl, .exptbl2, .exptbl3, .table-vertical, .exptbl-rates {
      border-bottom: 1px solid #cfcfd4; } }
  .exptbl > caption, .exptbl2 > caption, .exptbl3 > caption, .table-vertical > caption, .exptbl-rates > caption {
    font-size: 23.999px;
    font-size: 1.33333rem;
    line-height: 1.125;
    margin-bottom: 27px;
    margin-bottom: 1.5rem;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    text-align: left; }
  .exptbl th, .exptbl2 th, .exptbl3 th, .table-vertical th, .exptbl-rates th {
    font-size: 14px;
    font-size: 0.77778rem;
    line-height: 1.2;
    margin-bottom: 27px;
    margin-bottom: 1.5rem;
    padding-top: 7px;
    padding-top: 0.38889rem;
    padding-bottom: 7px;
    padding-bottom: 0.38889rem;
    color: #6f707b;
    text-align: left; }
    @media (max-width: 39.9375rem) {
      .exptbl th, .exptbl2 th, .exptbl3 th, .table-vertical th, .exptbl-rates th {
        margin-bottom: 0; } }
  .exptbl th,
  .exptbl td, .exptbl2 th,
  .exptbl2 td, .exptbl3 th,
  .exptbl3 td, .table-vertical th,
  .table-vertical td, .exptbl-rates th,
  .exptbl-rates td {
    border: 0 solid #cfcfd4;
    border-bottom-width: 1px;
    text-align: left; }
    .exptbl th:first-of-type,
    .exptbl td:first-of-type, .exptbl2 th:first-of-type,
    .exptbl2 td:first-of-type, .exptbl3 th:first-of-type,
    .exptbl3 td:first-of-type, .table-vertical th:first-of-type,
    .table-vertical td:first-of-type, .exptbl-rates th:first-of-type,
    .exptbl-rates td:first-of-type {
      text-align: left; }
    .exptbl th > ul, .exptbl th > strong,
    .exptbl td > ul,
    .exptbl td > strong, .exptbl2 th > ul, .exptbl2 th > strong,
    .exptbl2 td > ul,
    .exptbl2 td > strong, .exptbl3 th > ul, .exptbl3 th > strong,
    .exptbl3 td > ul,
    .exptbl3 td > strong, .table-vertical th > ul, .table-vertical th > strong,
    .table-vertical td > ul,
    .table-vertical td > strong, .exptbl-rates th > ul, .exptbl-rates th > strong,
    .exptbl-rates td > ul,
    .exptbl-rates td > strong {
      text-align: left; }
  .exptbl .table-row-blue, .exptbl2 .table-row-blue, .exptbl3 .table-row-blue, .table-vertical .table-row-blue, .exptbl-rates .table-row-blue {
    border: 0 solid #cfcfd4;
    border-top-width: 1px; }
  @media (max-width: 39.9375rem) {
    .exptbl td, .exptbl2 td, .exptbl3 td, .table-vertical td, .exptbl-rates td {
      border: solid #cfcfd4;
      border-width: 0 1px 0px; } }
  .exptbl tbody tr:nth-of-type(odd), .exptbl2 tbody tr:nth-of-type(odd), .exptbl3 tbody tr:nth-of-type(odd), .table-vertical tbody tr:nth-of-type(odd), .exptbl-rates tbody tr:nth-of-type(odd) {
    background-color: #e9e9ec; }
  .exptbl h3, .exptbl2 h3, .exptbl3 h3, .table-vertical h3, .exptbl-rates h3 {
    font-size: 36px;
    font-size: 2rem;
    line-height: 1;
    font-family: "Calibre-Semibold", Arial, sans-serif;
    text-align: left; }
    @media (max-width: 39.9375rem) {
      .exptbl h3, .exptbl2 h3, .exptbl3 h3, .table-vertical h3, .exptbl-rates h3 {
        margin-bottom: 0; } }

.boxcontent td {
  vertical-align: top; }

@media (max-width: 39.9375rem) {
  #responsive-table th, #responsive-table h3 {
    margin-bottom: 0; } }

@media (max-width: 39.9375rem) {
  #responsive-table .scdheader {
    display: none; } }

@media (max-width: 39.9375rem) {
  #responsive-table th,
  #responsive-table td {
    display: block; } }

#responsive-table th > span,
#responsive-table td > span {
  display: none; }
  @media (max-width: 39.9375rem) {
    #responsive-table th > span,
    #responsive-table td > span {
      display: block;
      font-weight: bold; } }

@media (max-width: 39.9375rem) {
  #responsive-table th > span + br,
  #responsive-table td > span + br {
    display: none; } }

@media (max-width: 39.9375rem) {
  #responsive-table th .scdheader,
  #responsive-table td .scdheader {
    display: none; } }

@media (max-width: 39.9375rem) {
  #responsive-table th,
  #responsive-table td {
    padding: 7px;
    padding: 0.38889rem;
    display: block; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
